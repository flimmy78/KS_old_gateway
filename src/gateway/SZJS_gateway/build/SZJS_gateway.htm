<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\SZJS_gateway.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\SZJS_gateway.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Oct 30 16:20:54 2017
<BR><P>
<H3>Maximum Stack Usage =       2608 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_thread_entry_UITD_eth_2 &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[234]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">rt_kprintf</a><BR>
 <LI><a href="#[56d]">rt_module_unload</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">rt_kprintf</a><BR>
 <LI><a href="#[561]">rt_object_is_systemobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[57d]">_rt_scheduler_stack_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">rt_kprintf</a><BR>
 <LI><a href="#[61d]">_list_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">rt_kprintf</a><BR>
 <LI><a href="#[246]">rt_thread_detach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[55d]">rt_object_detach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[583]">rt_schedule_remove_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[251]">rt_timer_detach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[248]">rt_thread_delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">rt_assert_handler</a><BR>
 <LI><a href="#[522]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[521]">print_value</a><BR>
 <LI><a href="#[520]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[521]">print_value</a><BR>
 <LI><a href="#[508]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[508]">cJSON_Delete</a><BR>
 <LI><a href="#[51c]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51b]">parse_value</a><BR>
 <LI><a href="#[519]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51b]">parse_value</a><BR>
 <LI><a href="#[648]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[648]">proc_assign_expr</a><BR>
 <LI><a href="#[64f]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64f]">proc_cast_expr</a><BR>
 <LI><a href="#[64e]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64f]">proc_cast_expr</a><BR>
 <LI><a href="#[64c]">proc_primary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64a]">proc_expr</a><BR>
 <LI><a href="#[647]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[648]">proc_assign_expr</a><BR>
 <LI><a href="#[62d]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62d]">finsh_type_check</a><BR>
 <LI><a href="#[62b]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62b]">finsh_compile</a><BR>
 <LI><a href="#[294]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[295]">lwip_sendto</a><BR>
 <LI><a href="#[161]">sys_shutdown</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[161]">sys_shutdown</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5a1]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a1]">copydir</a><BR>
 <LI><a href="#[6a6]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a6]">netconn_drain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[84]">ADC_PRO_init</a> from adc.o(.text) referenced 2 times from pro_ctrl.o(.text)
 <LI><a href="#[80]">ADC_init</a> from adc.o(.text) referenced from sensor_sample.o(.text)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream0_IRQHandler</a> from adc.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">ETH_IRQHandler</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1dd]">FAC_alarm_data_parse</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[3a2]">FAC_usual_rx_handler</a> from fire_alarm.o(.text) referenced from fire_alarm.o(.text)
 <LI><a href="#[3a0]">FAC_usual_rx_parser</a> from fire_alarm.o(.text) referenced from fire_alarm.o(.text)
 <LI><a href="#[3a3]">FAC_usual_server</a> from fire_alarm.o(.text) referenced from fire_alarm.o(.text)
 <LI><a href="#[1e0]">FA_mq_fault</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[1e1]">FA_mq_fault_2</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[1de]">FA_mq_fire</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[1df]">FA_mq_fire_2</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[1e2]">FA_mq_reset</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[1e3]">FA_mq_reset_2</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[439]">GSM_MG301_rx_ind</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(.text)
 <LI><a href="#[43b]">GSM_MG301_tx_complete</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(.text)
 <LI><a href="#[176]">GSM_cmd_init</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[177]">GSM_send</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[179]">GSM_socket_read</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[178]">GSM_socket_send</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[17a]">GSM_srv_gprs_down</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[17d]">GSM_srv_gprs_down_force</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[17b]">GSM_srv_power_on</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[17c]">GSM_srv_shutdown</a> from gsm_mg301.o(.text) referenced from gsm_mg301.o(FSymTab)
 <LI><a href="#[5e]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[83]">IO_input_pin_read</a> from iot_digit_in.o(.text) referenced 2 times from controller.o(.text)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12b]">OP_add_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[12d]">OP_add_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[12c]">OP_add_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13a]">OP_and_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13c]">OP_and_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13b]">OP_and_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[143]">OP_bw_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[145]">OP_bw_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[144]">OP_bw_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[156]">OP_call</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[131]">OP_div_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[133]">OP_div_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[132]">OP_div_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14c]">OP_ld_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14e]">OP_ld_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14f]">OP_ld_value_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[157]">OP_ld_value_byte_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[151]">OP_ld_value_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[159]">OP_ld_value_dword_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[150]">OP_ld_value_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[158]">OP_ld_value_word_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14d]">OP_ld_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[134]">OP_mod_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[136]">OP_mod_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[135]">OP_mod_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[137]">OP_mul_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[139]">OP_mul_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[138]">OP_mul_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[12a]">OP_no_op</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13d]">OP_or_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13f]">OP_or_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[13e]">OP_or_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[155]">OP_pop</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[146]">OP_shl_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[148]">OP_shl_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[147]">OP_shl_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[149]">OP_shr_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14b]">OP_shr_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[14a]">OP_shr_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[152]">OP_st_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[154]">OP_st_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[153]">OP_st_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[12e]">OP_sub_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[130]">OP_sub_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[12f]">OP_sub_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[140]">OP_xor_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[142]">OP_xor_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[141]">OP_xor_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[51]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3ce]">PRO_IO_input_read_pin</a> from pro_ctrl.o(.text) referenced 2 times from pro_ctrl.o(.text)
 <LI><a href="#[3c8]">PRO_IO_input_read_port</a> from pro_ctrl.o(.text) referenced 2 times from pro_ctrl.o(.text)
 <LI><a href="#[3cc]">PRO_output_write_pin</a> from pro_ctrl.o(.text) referenced from pro_ctrl.o(.text)
 <LI><a href="#[3ca]">PRO_output_write_port</a> from pro_ctrl.o(.text) referenced from pro_ctrl.o(.text)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from board.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a3]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3ac]">UITD_BLE_connect</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[3b2]">UITD_BLE_connected</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[3b1]">UITD_BLE_disconnect</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[3b0]">UITD_BLE_disconnected</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[3ae]">UITD_BLE_send</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[2f8]">UITD_GPRS_SZJS_connected</a> from uitd_main.o(.text) referenced from uitd_main.o(.text)
 <LI><a href="#[300]">UITD_GPRS_XFZD_connected</a> from uitd_main.o(.text) referenced from uitd_main.o(.text)
 <LI><a href="#[2f6]">UITD_GPRS_connect</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[2fa]">UITD_GPRS_disconnect</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[2fc]">UITD_GPRS_disconnected</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[2fe]">UITD_GPRS_received</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[2ff]">UITD_GPRS_report_IP</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[2fd]">UITD_GPRS_send</a> from uitd_main.o(.text) referenced 2 times from uitd_main.o(.text)
 <LI><a href="#[3b7]">UITD_WIFI_SZJS_connected</a> from uitd_wifi.o(.text) referenced from uitd_wifi.o(.text)
 <LI><a href="#[3be]">UITD_WIFI_XFZD_connected</a> from uitd_wifi.o(.text) referenced from uitd_wifi.o(.text)
 <LI><a href="#[3b5]">UITD_WIFI_connect</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[3b8]">UITD_WIFI_disconnect</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[3ba]">UITD_WIFI_disconnected</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[3bc]">UITD_WIFI_received</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[3bd]">UITD_WIFI_report_IP</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[3bb]">UITD_WIFI_send</a> from uitd_wifi.o(.text) referenced 2 times from uitd_wifi.o(.text)
 <LI><a href="#[170]">UITD_WIFI_server_info</a> from uitd_wifi.o(.text) referenced from uitd_wifi.o(FSymTab)
 <LI><a href="#[384]">UITD_dl_file_fail</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[383]">UITD_dl_file_success</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[387]">UITD_dl_firmware_fail</a> from uitd.o(.text) referenced 3 times from uitd.o(.text)
 <LI><a href="#[385]">UITD_dl_firmware_success</a> from uitd.o(.text) referenced 3 times from uitd.o(.text)
 <LI><a href="#[313]">UITD_eth_SZJS_connected</a> from uitd_eth.o(.text) referenced from uitd_eth.o(.text)
 <LI><a href="#[318]">UITD_eth_XFZD_connected</a> from uitd_eth.o(.text) referenced from uitd_eth.o(.text)
 <LI><a href="#[312]">UITD_eth_connect</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[314]">UITD_eth_disconnect</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[315]">UITD_eth_disconnected</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[316]">UITD_eth_received</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[317]">UITD_eth_report_IP</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[311]">UITD_eth_send</a> from uitd_eth.o(.text) referenced 2 times from uitd_eth.o(.text)
 <LI><a href="#[15f]">UITD_eth_server_info</a> from uitd_eth.o(.text) referenced from uitd_eth.o(FSymTab)
 <LI><a href="#[338]">UITD_file_close</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[337]">UITD_file_open</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[7e]">UITD_file_req_pkt_failed</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[37b]">UITD_send_inital_status_ack_deal</a> from uitd.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[15e]">UITD_server_info</a> from uitd_main.o(.text) referenced from uitd_main.o(FSymTab)
 <LI><a href="#[7f]">UITD_trans_data_failed</a> from uitd.o(.text) referenced 5 times from uitd.o(.text)
 <LI><a href="#[33]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">USART6_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[107]">VK32XX_configure</a> from vk3266.o(.text) referenced from vk3266.o(.constdata)
 <LI><a href="#[108]">VK32XX_control</a> from vk3266.o(.text) referenced from vk3266.o(.constdata)
 <LI><a href="#[181]">VK32XX_write_char</a> from vk3266.o(.text) referenced from vk3266.o(FSymTab)
 <LI><a href="#[182]">VK32XX_write_string</a> from vk3266.o(.text) referenced from vk3266.o(FSymTab)
 <LI><a href="#[98]">VK_serial_close</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[9b]">VK_serial_control</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[96]">VK_serial_init</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[97]">VK_serial_open</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[99]">VK_serial_read</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[9a]">VK_serial_write</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[17e]">WIFI_init</a> from wifi_esp_07.o(.text) referenced from wifi_esp_07.o(FSymTab)
 <LI><a href="#[43d]">WIFI_rx_ind</a> from wifi_esp_07.o(.text) referenced from wifi_esp_07.o(.text)
 <LI><a href="#[17f]">WIFI_send</a> from wifi_esp_07.o(.text) referenced from wifi_esp_07.o(FSymTab)
 <LI><a href="#[180]">WIFI_socket_send</a> from wifi_esp_07.o(.text) referenced from wifi_esp_07.o(FSymTab)
 <LI><a href="#[452]">WIFI_tx_complete</a> from wifi_esp_07.o(.text) referenced from wifi_esp_07.o(.text)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a4]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[fc]">_log_control</a> from log_trace.o(.text) referenced from log_trace.o(.text)
 <LI><a href="#[fb]">_log_write</a> from log_trace.o(.text) referenced from log_trace.o(.text)
 <LI><a href="#[b2]">_pin_control</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[b0]">_pin_read</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[b1]">_pin_write</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[c4]">_portal_close</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c2]">_portal_init</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c3]">_portal_open</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c6]">_portal_read</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c8]">_portal_rx_indicate</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c7]">_portal_tx_complete</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[c5]">_portal_write</a> from portal.o(.text) referenced from portal.o(.text)
 <LI><a href="#[21d]">_rt_errno</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[a8]">_rym_bg</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[a6]">_rym_end</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[fd]">_rym_rx_ind</a> from ymodem.o(.text) referenced from ymodem.o(.text)
 <LI><a href="#[a7]">_rym_tof</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[ff]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[100]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[fe]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[bb]">_spi_bus_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[b9]">_spi_bus_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[ba]">_spi_bus_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[be]">_spidev_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[bc]">_spidev_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[bd]">_spidev_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[102]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[dd]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[167]">append</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[ec]">arp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[1da]">atoi</a> from atoi.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[1b4]">cat</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[164]">cat_bin</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[165]">cat_flash</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[25a]">close</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[26a]">closedir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[39b]">com_bus_rx_ind</a> from fire_alarm.o(.text) referenced from fire_alarm.o(.text)
 <LI><a href="#[0]">configure</a> from stm32f20x_40x_spi.o(.text) referenced 2 times from stm32f20x_40x_spi.o(.data)
 <LI><a href="#[16c]">console_enable_login</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[1ac]">controller_output</a> from iot_digit_out.o(.text) referenced from iot_digit_out.o(FSymTab)
 <LI><a href="#[1ad]">controller_output_delay</a> from iot_digit_out.o(.text) referenced from iot_digit_out.o(FSymTab)
 <LI><a href="#[1ae]">controller_toggle</a> from iot_digit_out.o(.text) referenced from iot_digit_out.o(FSymTab)
 <LI><a href="#[1b5]">copy</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[a5]">cpu_usage_idle_hook</a> from cpuusage.o(.text) referenced from cpuusage.o(.text)
 <LI><a href="#[1b7]">df</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[116]">dfs_elm_close</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11a]">dfs_elm_flush</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11c]">dfs_elm_getdents</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[117]">dfs_elm_ioctl</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11b]">dfs_elm_lseek</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[113]">dfs_elm_mkfs</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[111]">dfs_elm_mount</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[115]">dfs_elm_open</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[118]">dfs_elm_read</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11f]">dfs_elm_rename</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11e]">dfs_elm_stat</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[114]">dfs_elm_statfs</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[11d]">dfs_elm_unlink</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[112]">dfs_elm_unmount</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[119]">dfs_elm_write</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[258]">dfs_normalize_path</a> from dfs.o(.text) referenced from dfs.o(RTMSymTab)
 <LI><a href="#[123]">dfs_romfs_close</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[127]">dfs_romfs_getdents</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[124]">dfs_romfs_ioctl</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[126]">dfs_romfs_lseek</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[120]">dfs_romfs_mount</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[122]">dfs_romfs_open</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[125]">dfs_romfs_read</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[128]">dfs_romfs_stat</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[121]">dfs_romfs_unmount</a> from dfs_romfs.o(.text) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[257]">dfs_subdir</a> from dfs.o(.text) referenced from dfs.o(RTMSymTab)
 <LI><a href="#[e7]">dhcp_recv</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[2a6]">dhcp_renew</a> from dhcp.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a5]">dhcp_start</a> from dhcp.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a7]">dhcp_stop</a> from dhcp.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[ed]">dhcp_timer_coarse</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[ee]">dhcp_timer_fine</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[283]">dlclose</a> from dlclose.o(.text) referenced from dlclose.o(RTMSymTab)
 <LI><a href="#[284]">dlerror</a> from dlerror.o(.text) referenced from dlerror.o(RTMSymTab)
 <LI><a href="#[285]">dlopen</a> from dlopen.o(.text) referenced from dlopen.o(RTMSymTab)
 <LI><a href="#[286]">dlsym</a> from dlsym.o(.text) referenced from dlsym.o(RTMSymTab)
 <LI><a href="#[e8]">dns_recv</a> from dns.o(.text) referenced from dns.o(.text)
 <LI><a href="#[ef]">dns_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[cd]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d4]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[ce]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[dc]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[cb]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[cf]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[de]">do_dns_found</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[cc]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d5]">do_gethostbyname</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[187]">do_init</a> from init_rc.o(.text) referenced from init_rc.o(FSymTab)
 <LI><a href="#[d0]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[186]">do_modules</a> from init_rc.o(.text) referenced from init_rc.o(FSymTab)
 <LI><a href="#[6c1]">do_netifapi_netif_add</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[6c4]">do_netifapi_netif_common</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[6c3]">do_netifapi_netif_set_addr</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[ca]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d1]">do_recv</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d2]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d3]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[d8]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[f2]">eth_netif_device_init</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[f5]">eth_rx_thread_entry</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[f6]">eth_tx_thread_entry</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[f0]">etharp_output</a> from etharp.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[f1]">ethernetif_linkoutput</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[df]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[f8]">fdevice_close</a> from log_file.o(.text) referenced from log_file.o(.text)
 <LI><a href="#[fa]">fdevice_control</a> from log_file.o(.text) referenced from log_file.o(.text)
 <LI><a href="#[f7]">fdevice_open</a> from log_file.o(.text) referenced from log_file.o(.text)
 <LI><a href="#[f9]">fdevice_write</a> from log_file.o(.text) referenced from log_file.o(.text)
 <LI><a href="#[c9]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[61a]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[16e]">fire_alarm_IO_out</a> from fire_alarm.o(.text) referenced from fire_alarm.o(FSymTab)
 <LI><a href="#[16f]">fire_alarm_controller_list</a> from fire_alarm.o(.text) referenced from fire_alarm.o(FSymTab)
 <LI><a href="#[16d]">fire_alarm_send</a> from fire_alarm.o(.text) referenced from fire_alarm.o(FSymTab)
 <LI><a href="#[1dc]">fire_alarm_struct_init</a> from fire_alarm.o(.text) referenced from fire_alarm.o(RTMSymTab)
 <LI><a href="#[aa]">free</a> from malloc.o(i.free) referenced from cjson.o(.text)
 <LI><a href="#[260]">fstat</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[261]">fsync</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[26b]">getcwd</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[10f]">gpio_get_scl</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[10e]">gpio_get_sda</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[10d]">gpio_set_scl</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[10c]">gpio_set_sda</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[110]">gpio_udelay</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[1bc]">hello</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[129]">i2c_bit_xfer</a> from i2c-bit-ops.o(.text) referenced from i2c-bit-ops.o(.constdata)
 <LI><a href="#[af]">i2c_bus_device_control</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[ad]">i2c_bus_device_read</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[ae]">i2c_bus_device_write</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[262]">ioctl</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[29f]">ipaddr_aton</a> from ip_addr.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a0]">ipaddr_ntoa</a> from ip_addr.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[101]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1ab]">json_cfg_print_AP01</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a6]">json_cfg_print_debug_level</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a4]">json_cfg_print_sensor_period_1</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a5]">json_cfg_print_sensor_period_2</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1aa]">json_cfg_print_server_ip_port</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a9]">json_cfg_print_server_port</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a8]">json_cfg_print_svr_use_name</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a7]">json_cfg_print_sys_mode</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[197]">json_cfg_wr_AP01</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a3]">json_cfg_wr_FA_input</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a2]">json_cfg_wr_FA_uart</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19f]">json_cfg_wr_PRO_CTRL_input</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19e]">json_cfg_wr_PRO_CTRL_output</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a1]">json_cfg_wr_PRO_UITD_input</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1a0]">json_cfg_wr_PRO_UITD_output</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[198]">json_cfg_wr_WIFI</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18c]">json_cfg_wr_debug_level</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[199]">json_cfg_wr_eth_DHCP</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19a]">json_cfg_wr_eth_DNS</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19b]">json_cfg_wr_eth_IP</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18e]">json_cfg_wr_log_file_en</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18f]">json_cfg_wr_log_file_path</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19c]">json_cfg_wr_mode</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18a]">json_cfg_wr_sensor_period_1</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18b]">json_cfg_wr_sensor_period_2</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[194]">json_cfg_wr_server_ip_port</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[196]">json_cfg_wr_server_ip_port_2</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[18d]">json_cfg_wr_server_num</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[193]">json_cfg_wr_server_port</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[195]">json_cfg_wr_server_port_2</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[191]">json_cfg_wr_svr_use_name</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[192]">json_cfg_wr_svr_use_name_2</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[190]">json_cfg_wr_sys_mode</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[19d]">json_cfg_wr_transparent</a> from json_config.o(.text) referenced from json_config.o(FSymTab)
 <LI><a href="#[1c9]">list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[175]">list_date</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[1c6]">list_device</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c0]">list_event</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1cc]">list_if</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1c2]">list_mailbox</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1af]">list_mem</a> from mem.o(.text) referenced from mem.o(FSymTab)
 <LI><a href="#[1c4]">list_mempool</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c8]">list_mod_detail</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c7]">list_module</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c3]">list_msgqueue</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c1]">list_mutex</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1bf]">list_sem</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b0]">list_symbol</a> from module.o(.text) referenced from module.o(FSymTab)
 <LI><a href="#[1cd]">list_tcps</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1be]">list_thread</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c5]">list_timer</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d0]">log_trace</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[1d0]">log_trace</a> from log_trace.o(.text) referenced from log_trace.o(RTMSymTab)
 <LI><a href="#[1d4]">log_trace_close</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[1d1]">log_trace_flush</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[1d1]">log_trace_flush</a> from log_trace.o(.text) referenced from log_trace.o(RTMSymTab)
 <LI><a href="#[1d3]">log_trace_list_date</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[16a]">log_trace_reset</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[1d2]">log_trace_set_device</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[1ce]">log_trace_set_file</a> from log_file.o(.text) referenced from log_file.o(FSymTab)
 <LI><a href="#[1cf]">log_trace_set_level</a> from log_trace.o(.text) referenced from log_trace.o(FSymTab)
 <LI><a href="#[1b2]">ls</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[25c]">lseek</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[287]">lwip_accept</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[288]">lwip_bind</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28e]">lwip_close</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28f]">lwip_connect</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[29a]">lwip_fcntl</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a3]">lwip_freeaddrinfo</a> from netdb.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a4]">lwip_getaddrinfo</a> from netdb.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a1]">lwip_gethostbyname</a> from netdb.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a2]">lwip_gethostbyname_r</a> from netdb.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28a]">lwip_getpeername</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28b]">lwip_getsockname</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28c]">lwip_getsockopt</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[e0]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[29d]">lwip_htonl</a> from def.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[29b]">lwip_htons</a> from def.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[299]">lwip_ioctl</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[290]">lwip_listen</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[29e]">lwip_ntohl</a> from def.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[29c]">lwip_ntohs</a> from def.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[292]">lwip_read</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[291]">lwip_recv</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[293]">lwip_recvfrom</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[298]">lwip_select</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[294]">lwip_send</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[295]">lwip_sendto</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[28d]">lwip_setsockopt</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[e1]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[289]">lwip_shutdown</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[296]">lwip_socket</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[297]">lwip_write</a> from sockets.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[5f]">main</a> from startup.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a9]">malloc</a> from malloc.o(i.malloc) referenced from cjson.o(.text)
 <LI><a href="#[1b8]">mkdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[1b8]">mkdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[1b6]">mkfs</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[3aa]">module_BLE_rx_ind</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[3ab]">module_BLE_tx_complete</a> from uitd_ble.o(.text) referenced from uitd_ble.o(.text)
 <LI><a href="#[ac]">module_main_entry</a> from module.o(.text) referenced from module.o(.text)
 <LI><a href="#[189]">module_test</a> from init_rc.o(.text) referenced from init_rc.o(FSymTab)
 <LI><a href="#[e5]">netif_device_init</a> from sys_arch.o(.text) referenced from sys_arch.o(.text)
 <LI><a href="#[2a9]">netif_find</a> from netif.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2aa]">netif_set_addr</a> from netif.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2ac]">netif_set_gw</a> from netif.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2ab]">netif_set_ipaddr</a> from netif.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[f4]">netif_set_link_down</a> from netif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[f3]">netif_set_link_up</a> from netif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[2ad]">netif_set_netmask</a> from netif.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[2a8]">netifapi_netif_set_addr</a> from netifapi.o(.text) referenced from sys_arch.o(RTMSymTab)
 <LI><a href="#[259]">open</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[265]">opendir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[81]">output_write_pin</a> from iot_digit_out.o(.text) referenced 2 times from sensor_sample.o(.text)
 <LI><a href="#[82]">output_write_port</a> from iot_digit_out.o(.text) referenced 2 times from sensor_sample.o(.text)
 <LI><a href="#[e3]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[e9]">pbuf_free_ooseq_callback</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[a2]">phy_monitor_thread_entry</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[d7]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[25b]">read</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[266]">readdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[da]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[d9]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[db]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[25d]">rename</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[269]">rewinddir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[184]">rf</a> from tofile.o(.text) referenced from tofile.o(FSymTab)
 <LI><a href="#[1b3]">rm</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[264]">rmdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[2e8]">rt_APP_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[2e5]">rt_COM_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[2db]">rt_UITD_BLE_init</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[2e4]">rt_UITD_GPRS_ETH_init</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[2e2]">rt_UITD_GPRS_init</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[2e3]">rt_UITD_eth_init</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[234]">rt_assert_handler</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[236]">rt_calloc</a> from mem.o(.text) referenced from mem.o(RTMSymTab)
 <LI><a href="#[26e]">rt_completion_done</a> from completion.o(.text) referenced from completion.o(RTMSymTab)
 <LI><a href="#[26c]">rt_completion_init</a> from completion.o(.text) referenced from completion.o(RTMSymTab)
 <LI><a href="#[26d]">rt_completion_wait</a> from completion.o(.text) referenced from completion.o(RTMSymTab)
 <LI><a href="#[22f]">rt_console_close_device</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[22e]">rt_console_get_device</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[230]">rt_console_set_device</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[242]">rt_critical_level</a> from scheduler.o(.text) referenced from scheduler.o(RTMSymTab)
 <LI><a href="#[26f]">rt_data_queue_init</a> from dataqueue.o(.text) referenced from dataqueue.o(RTMSymTab)
 <LI><a href="#[272]">rt_data_queue_peak</a> from dataqueue.o(.text) referenced from dataqueue.o(RTMSymTab)
 <LI><a href="#[271]">rt_data_queue_pop</a> from dataqueue.o(.text) referenced from dataqueue.o(RTMSymTab)
 <LI><a href="#[270]">rt_data_queue_push</a> from dataqueue.o(.text) referenced from dataqueue.o(RTMSymTab)
 <LI><a href="#[273]">rt_data_queue_reset</a> from dataqueue.o(.text) referenced from dataqueue.o(RTMSymTab)
 <LI><a href="#[1ea]">rt_device_close</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1ed]">rt_device_control</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1e8]">rt_device_find</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1e9]">rt_device_open</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1eb]">rt_device_read</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1e6]">rt_device_register</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1ee]">rt_device_set_rx_indicate</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1ef]">rt_device_set_tx_complete</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1e7]">rt_device_unregister</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[1ec]">rt_device_write</a> from device.o(.text) referenced from device.o(RTMSymTab)
 <LI><a href="#[240]">rt_enter_critical</a> from scheduler.o(.text) referenced from scheduler.o(RTMSymTab)
 <LI><a href="#[205]">rt_event_control</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[201]">rt_event_create</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[202]">rt_event_delete</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[200]">rt_event_detach</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1ff]">rt_event_init</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[204]">rt_event_recv</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[203]">rt_event_send</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[241]">rt_exit_critical</a> from scheduler.o(.text) referenced from scheduler.o(RTMSymTab)
 <LI><a href="#[1d6]">rt_ext_atoi</a> from sys_misc.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[1d5]">rt_ext_strlen</a> from sys_misc.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[1d7]">rt_ext_strstr</a> from sys_misc.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[3]">rt_free</a> from mem.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[3]">rt_free</a> from mem.o(.text) referenced 2 times from cjson.o(.text)
 <LI><a href="#[3]">rt_free</a> from mem.o(.text) referenced from mem.o(RTMSymTab)
 <LI><a href="#[233]">rt_free_align</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[21b]">rt_get_errno</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[231]">rt_hw_console_output</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[219]">rt_hw_interrupt_disable</a> from context_rvds.o(.text) referenced from irq.o(RTMSymTab)
 <LI><a href="#[21a]">rt_hw_interrupt_enable</a> from context_rvds.o(.text) referenced from irq.o(RTMSymTab)
 <LI><a href="#[7b]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[216]">rt_interrupt_enter</a> from irq.o(.text) referenced from irq.o(RTMSymTab)
 <LI><a href="#[218]">rt_interrupt_get_nest</a> from irq.o(.text) referenced from irq.o(RTMSymTab)
 <LI><a href="#[217]">rt_interrupt_leave</a> from irq.o(.text) referenced from irq.o(RTMSymTab)
 <LI><a href="#[188]">rt_kprintf</a> from kservice.o(.text) referenced from init_rc.o(FSymTab)
 <LI><a href="#[188]">rt_kprintf</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[2]">rt_malloc</a> from mem.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[2]">rt_malloc</a> from mem.o(.text) referenced from cjson.o(.text)
 <LI><a href="#[2]">rt_malloc</a> from mem.o(.text) referenced from mem.o(RTMSymTab)
 <LI><a href="#[232]">rt_malloc_align</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[20d]">rt_mb_control</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[208]">rt_mb_create</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[209]">rt_mb_delete</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[207]">rt_mb_detach</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[206]">rt_mb_init</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[20c]">rt_mb_recv</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[20b]">rt_mb_send</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[20a]">rt_mb_send_wait</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[221]">rt_memcmp</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[21f]">rt_memcpy</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[220]">rt_memmove</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[21e]">rt_memset</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[23e]">rt_module_find</a> from module.o(.text) referenced from module.o(RTMSymTab)
 <LI><a href="#[1b1]">rt_module_open</a> from module.o(.text) referenced from module.o(FSymTab)
 <LI><a href="#[23d]">rt_module_self</a> from module.o(.text) referenced from module.o(RTMSymTab)
 <LI><a href="#[23b]">rt_mp_alloc</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[239]">rt_mp_create</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[23a]">rt_mp_delete</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[238]">rt_mp_detach</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[23c]">rt_mp_free</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[237]">rt_mp_init</a> from mempool.o(.text) referenced from mempool.o(RTMSymTab)
 <LI><a href="#[215]">rt_mq_control</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[210]">rt_mq_create</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[211]">rt_mq_delete</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[20f]">rt_mq_detach</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[20e]">rt_mq_init</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[214]">rt_mq_recv</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[212]">rt_mq_send</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[213]">rt_mq_urgent</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[94]">rt_msd_close</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[95]">rt_msd_control</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[92]">rt_msd_init</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[93]">rt_msd_open</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[8e]">rt_msd_read</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[90]">rt_msd_sdhc_read</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[91]">rt_msd_sdhc_write</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[8f]">rt_msd_write</a> from msd.o(.text) referenced from msd.o(.text)
 <LI><a href="#[1fe]">rt_mutex_control</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1fa]">rt_mutex_create</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1fb]">rt_mutex_delete</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f9]">rt_mutex_detach</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f8]">rt_mutex_init</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1fd]">rt_mutex_release</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1fc]">rt_mutex_take</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[23f]">rt_object_get_information</a> from object.o(.text) referenced from object.o(RTMSymTab)
 <LI><a href="#[1b9]">rt_pin_mode</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[1bb]">rt_pin_read</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[1ba]">rt_pin_write</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[c1]">rt_pipe_control</a> from pipe.o(.text) referenced from pipe.o(.text)
 <LI><a href="#[276]">rt_pipe_create</a> from pipe.o(.text) referenced from pipe.o(RTMSymTab)
 <LI><a href="#[277]">rt_pipe_destroy</a> from pipe.o(.text) referenced from pipe.o(RTMSymTab)
 <LI><a href="#[275]">rt_pipe_detach</a> from pipe.o(.text) referenced from pipe.o(RTMSymTab)
 <LI><a href="#[274]">rt_pipe_init</a> from pipe.o(.text) referenced from pipe.o(RTMSymTab)
 <LI><a href="#[bf]">rt_pipe_read</a> from pipe.o(.text) referenced from pipe.o(.text)
 <LI><a href="#[c0]">rt_pipe_write</a> from pipe.o(.text) referenced from pipe.o(.text)
 <LI><a href="#[27a]">rt_portal_create</a> from portal.o(.text) referenced from portal.o(RTMSymTab)
 <LI><a href="#[27b]">rt_portal_destroy</a> from portal.o(.text) referenced from portal.o(RTMSymTab)
 <LI><a href="#[279]">rt_portal_detach</a> from portal.o(.text) referenced from portal.o(RTMSymTab)
 <LI><a href="#[278]">rt_portal_init</a> from portal.o(.text) referenced from portal.o(RTMSymTab)
 <LI><a href="#[235]">rt_realloc</a> from mem.o(.text) referenced from mem.o(RTMSymTab)
 <LI><a href="#[27f]">rt_ringbuffer_get</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[282]">rt_ringbuffer_getchar</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[27c]">rt_ringbuffer_init</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[27d]">rt_ringbuffer_put</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[27e]">rt_ringbuffer_put_force</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[280]">rt_ringbuffer_putchar</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[281]">rt_ringbuffer_putchar_force</a> from ringbuffer.o(.text) referenced from ringbuffer.o(RTMSymTab)
 <LI><a href="#[87]">rt_rtc_control</a> from rtc.o(.text) referenced from rtc.o(.text)
 <LI><a href="#[85]">rt_rtc_open</a> from rtc.o(.text) referenced from rtc.o(.text)
 <LI><a href="#[86]">rt_rtc_read</a> from rtc.o(.text) referenced from rtc.o(.text)
 <LI><a href="#[1f7]">rt_sem_control</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f2]">rt_sem_create</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f3]">rt_sem_delete</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f1]">rt_sem_detach</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f0]">rt_sem_init</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f6]">rt_sem_release</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f4]">rt_sem_take</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[1f5]">rt_sem_trytake</a> from ipc.o(.text) referenced from ipc.o(RTMSymTab)
 <LI><a href="#[b5]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[b8]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[b3]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[b4]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[b6]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[b7]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[21c]">rt_set_errno</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[229]">rt_show_version</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[22b]">rt_snprintf</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[22d]">rt_sprintf</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[9e]">rt_stm32_eth_close</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[a1]">rt_stm32_eth_control</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[9c]">rt_stm32_eth_init</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[9d]">rt_stm32_eth_open</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[9f]">rt_stm32_eth_read</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[4c2]">rt_stm32_eth_rx</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[4c0]">rt_stm32_eth_tx</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[a0]">rt_stm32_eth_write</a> from stm32f2xx_eth_lan8720a.o(.text) referenced from stm32f2xx_eth_lan8720a.o(.text)
 <LI><a href="#[223]">rt_strcasecmp</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[226]">rt_strcmp</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[228]">rt_strdup</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[227]">rt_strlen</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[225]">rt_strncmp</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[224]">rt_strncpy</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[222]">rt_strstr</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[24b]">rt_thread_control</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[247]">rt_thread_create</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[24a]">rt_thread_delay</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[248]">rt_thread_delete</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[246]">rt_thread_detach</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[64]">rt_thread_entry_GSM_MG301</a> from gsm_mg301.o(.text) referenced from application.o(.text)
 <LI><a href="#[65]">rt_thread_entry_GSM_rx</a> from gsm_mg301.o(.text) referenced from application.o(.text)
 <LI><a href="#[7a]">rt_thread_entry_PRO_CTRL</a> from pro_ctrl.o(.text) referenced from application.o(.text)
 <LI><a href="#[79]">rt_thread_entry_PRO_UITD</a> from pro_uitd.o(.text) referenced from application.o(.text)
 <LI><a href="#[71]">rt_thread_entry_UITD_2_WIFI</a> from uitd_wifi.o(.text) referenced from application.o(.text)
 <LI><a href="#[6b]">rt_thread_entry_UITD_2_main</a> from uitd_main.o(.text) referenced from application.o(.text)
 <LI><a href="#[60]">rt_thread_entry_UITD_BLE</a> from uitd_ble.o(.text) referenced from application.o(.text)
 <LI><a href="#[62]">rt_thread_entry_UITD_BLE_rec</a> from uitd_ble.o(.text) referenced from application.o(.text)
 <LI><a href="#[61]">rt_thread_entry_UITD_BLE_rx</a> from uitd_ble.o(.text) referenced from application.o(.text)
 <LI><a href="#[63]">rt_thread_entry_UITD_GPRS_rec</a> from uitd_main.o(.text) referenced from application.o(.text)
 <LI><a href="#[70]">rt_thread_entry_UITD_WIFI</a> from uitd_wifi.o(.text) referenced from application.o(.text)
 <LI><a href="#[69]">rt_thread_entry_UITD_WIFI_rec</a> from uitd_wifi.o(.text) referenced from application.o(.text)
 <LI><a href="#[6c]">rt_thread_entry_UITD_eth</a> from uitd_eth.o(.text) referenced from application.o(.text)
 <LI><a href="#[6e]">rt_thread_entry_UITD_eth_2</a> from uitd_eth.o(.text) referenced from application.o(.text)
 <LI><a href="#[66]">rt_thread_entry_UITD_eth_rec</a> from uitd_eth.o(.text) referenced from application.o(.text)
 <LI><a href="#[6a]">rt_thread_entry_UITD_main</a> from uitd_main.o(.text) referenced from application.o(.text)
 <LI><a href="#[498]">rt_thread_entry_VK32xx</a> from vk3266.o(.text) referenced from vk3266.o(.text)
 <LI><a href="#[67]">rt_thread_entry_WIFI_ESP_07</a> from wifi_esp_07.o(.text) referenced from application.o(.text)
 <LI><a href="#[68]">rt_thread_entry_WIFI_rx</a> from wifi_esp_07.o(.text) referenced from application.o(.text)
 <LI><a href="#[77]">rt_thread_entry_ctrl_in</a> from controller.o(.text) referenced from application.o(.text)
 <LI><a href="#[78]">rt_thread_entry_ctrl_out</a> from controller.o(.text) referenced from application.o(.text)
 <LI><a href="#[6d]">rt_thread_entry_eth_rx</a> from uitd_eth.o(.text) referenced from application.o(.text)
 <LI><a href="#[6f]">rt_thread_entry_eth_rx_2</a> from uitd_eth.o(.text) referenced from application.o(.text)
 <LI><a href="#[75]">rt_thread_entry_fire_alarm</a> from fire_alarm.o(.text) referenced 2 times from application.o(.text)
 <LI><a href="#[76]">rt_thread_entry_fire_alarm_rx</a> from fire_alarm.o(.text) referenced 2 times from application.o(.text)
 <LI><a href="#[74]">rt_thread_entry_sensor_sample</a> from sensor_sample.o(.text) referenced from application.o(.text)
 <LI><a href="#[7c]">rt_thread_entry_sys_status</a> from sys_status.o(.text) referenced from application.o(.text)
 <LI><a href="#[72]">rt_thread_entry_transparent</a> from transparent.o(.text) referenced from application.o(.text)
 <LI><a href="#[73]">rt_thread_entry_transparent_rx</a> from transparent.o(.text) referenced from application.o(.text)
 <LI><a href="#[584]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[24f]">rt_thread_find</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[ab]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[243]">rt_thread_init</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[24d]">rt_thread_resume</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[244]">rt_thread_self</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[245]">rt_thread_startup</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[24c]">rt_thread_suspend</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[24e]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[24e]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[249]">rt_thread_yield</a> from thread.o(.text) referenced from thread.o(RTMSymTab)
 <LI><a href="#[1e5]">rt_tick_from_millisecond</a> from clock.o(.text) referenced from clock.o(RTMSymTab)
 <LI><a href="#[1e4]">rt_tick_get</a> from clock.o(.text) referenced from clock.o(RTMSymTab)
 <LI><a href="#[256]">rt_timer_control</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[252]">rt_timer_create</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[253]">rt_timer_delete</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[251]">rt_timer_detach</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[250]">rt_timer_init</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[254]">rt_timer_start</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[255]">rt_timer_stop</a> from src_timer.o(.text) referenced from src_timer.o(RTMSymTab)
 <LI><a href="#[22a]">rt_vsnprintf</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[22c]">rt_vsprintf</a> from kservice.o(.text) referenced from kservice.o(RTMSymTab)
 <LI><a href="#[183]">ry</a> from tofile.o(.text) referenced from tofile.o(FSymTab)
 <LI><a href="#[185]">script_exec</a> from init_rc.o(.text) referenced from init_rc.o(FSymTab)
 <LI><a href="#[268]">seekdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[554]">sensor_sample_send_data_mq</a> from iot_analog_in.o(.text) referenced from iot_analog_in.o(.text)
 <LI><a href="#[d6]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[171]">set_date</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[1cb]">set_dns</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1ca]">set_if</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[172]">set_time</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[1db]">sprintf</a> from printfa.o(i.__0sprintf) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[1d8]">sscanf</a> from sscanf.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[25f]">stat</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[263]">statfs</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[103]">stm32_configure</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[104]">stm32_control</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[106]">stm32_getc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[109]">stm32_pin_mode</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[10b]">stm32_pin_read</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[10a]">stm32_pin_write</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[105]">stm32_putc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[1d9]">strstr</a> from strstr.o(.text) referenced from sys_misc.o(RTMSymTab)
 <LI><a href="#[169]">sys_delay</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[15b]">sys_file_download</a> from uitd_main.o(.text) referenced from uitd_main.o(FSymTab)
 <LI><a href="#[30a]">sys_file_download_fail</a> from uitd_main.o(.text) referenced from uitd_main.o(.text)
 <LI><a href="#[309]">sys_file_download_success</a> from uitd_main.o(.text) referenced from uitd_main.o(.text)
 <LI><a href="#[15a]">sys_fw_upgrade</a> from uitd_main.o(.text) referenced from uitd_main.o(FSymTab)
 <LI><a href="#[16b]">sys_log_level_amend</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[160]">sys_reboot</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[162]">sys_reboot_if</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[163]">sys_reboot_if_0</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[15c]">sys_sensor_send_data</a> from uitd_main.o(.text) referenced from uitd_main.o(FSymTab)
 <LI><a href="#[161]">sys_shutdown</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[15d]">sys_upload_file_info</a> from uitd_main.o(.text) referenced from uitd_main.o(FSymTab)
 <LI><a href="#[ea]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[73b]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[e6]">tcpip_init_done_callback</a> from sys_arch.o(.text) referenced from sys_arch.o(.text)
 <LI><a href="#[e4]">tcpip_input</a> from tcpip.o(.text) referenced 2 times from sys_arch.o(.text)
 <LI><a href="#[eb]">tcpip_tcp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[e2]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[267]">telldir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[174]">time_BKR_display</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[173]">time_BKR_record</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[166]">touch</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[3c1]">transparent_rx_ind</a> from transparent.o(.text) referenced from transparent.o(.text)
 <LI><a href="#[3c2]">transparent_tx_complete</a> from transparent.o(.text) referenced from transparent.o(.text)
 <LI><a href="#[25e]">unlink</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[168]">upgrade</a> from sys_misc.o(.text) referenced from sys_misc.o(FSymTab)
 <LI><a href="#[1bd]">version</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[8a]">w25qxx_flash_close</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[8d]">w25qxx_flash_control</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[88]">w25qxx_flash_init</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[89]">w25qxx_flash_open</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[8b]">w25qxx_flash_read</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[8c]">w25qxx_flash_write</a> from spi_flash_w25qxx.o(.text) referenced from spi_flash_w25qxx.o(.text)
 <LI><a href="#[7d]">write</a> from dfs_posix.o(.text) referenced from uitd.o(.text)
 <LI><a href="#[7d]">write</a> from dfs_posix.o(.text) referenced from dfs_posix.o(RTMSymTab)
 <LI><a href="#[1]">xfer</a> from stm32f20x_40x_spi.o(.text) referenced 2 times from stm32f20x_40x_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a4]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[7b3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2ae]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7b5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7b6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7b7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7b8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b0]"></a>system_fs_check</STRONG> (Thumb, 1808 bytes, Stack size 32 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = system_fs_check &rArr; json_cfg_wr_sys_mode &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sys_mode
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_cfg
</UL>

<P><STRONG><a name="[2bd]"></a>file_zero_clean_up</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = file_zero_clean_up &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_clean_up
</UL>

<P><STRONG><a name="[2be]"></a>system_fs_clean_up</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = system_fs_clean_up &rArr; file_zero_clean_up &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2bf]"></a>sys_init_cfg</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sys_init_cfg &rArr; system_fs_check &rArr; json_cfg_wr_sys_mode &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2c0]"></a>sys_ID_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_ID_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[7b]"></a>rt_init_thread_entry</STRONG> (Thumb, 1582 bytes, Stack size 48 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rt_init_thread_entry &rArr; do_init &rArr; script_exec &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_module_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_core_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_close_device
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_file
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sys_cfg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ID_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_cfg
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_clean_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2db]"></a>rt_UITD_BLE_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_UITD_BLE_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2dc]"></a>mode_thread_start</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mode_thread_start &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_GPRS_ETH_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_eth_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_GPRS_init
</UL>

<P><STRONG><a name="[2e2]"></a>rt_UITD_GPRS_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rt_UITD_GPRS_init &rArr; mode_thread_start &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2e3]"></a>rt_UITD_eth_init</STRONG> (Thumb, 798 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rt_UITD_eth_init &rArr; mode_thread_start &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2e4]"></a>rt_UITD_GPRS_ETH_init</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rt_UITD_GPRS_ETH_init &rArr; mode_thread_start &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2e5]"></a>rt_COM_init_thread_entry</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_COM_init_thread_entry &rArr; json_cfg_load_mode &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2e8]"></a>rt_APP_init_thread_entry</STRONG> (Thumb, 944 bytes, Stack size 40 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_APP_init_thread_entry &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[2e9]"></a>rt_application_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2ea]"></a>create_testing_log</STRONG> (Thumb, 1296 bytes, Stack size 272 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = create_testing_log &rArr; touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_mother_board_string
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_ext_dev_module_string
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
</UL>

<P><STRONG><a name="[2f1]"></a>testing_status_check</STRONG> (Thumb, 1168 bytes, Stack size 32 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = testing_status_check &rArr; create_testing_log &rArr; touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sys_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[2f9]"></a>UITD_sensor_handler_init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UITD_sensor_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_SZJS_connected
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_SZJS_connected
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_SZJS_connected
</UL>

<P><STRONG><a name="[301]"></a>UITD_sensor_handler_2_init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UITD_sensor_handler_2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_XFZD_connected
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_XFZD_connected
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_XFZD_connected
</UL>

<P><STRONG><a name="[2f2]"></a>UITD_listen_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_write
</UL>

<P><STRONG><a name="[2f4]"></a>UITD_listen_listen</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, uitd_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_listen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[7b9]"></a>UITD_listen_disconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_main.o(.text), UNUSED)

<P><STRONG><a name="[7ba]"></a>UITD_listen_received</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_main.o(.text), UNUSED)

<P><STRONG><a name="[7bb]"></a>UITD_listen_accepted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_main.o(.text), UNUSED)

<P><STRONG><a name="[7bc]"></a>UITD_listen_report_IP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_main.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>UITD_GPRS_connect</STRONG> (Thumb, 120 bytes, Stack size 128 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = UITD_GPRS_connect &rArr; GPRS_connect &rArr; GPRS_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2f8]"></a>UITD_GPRS_SZJS_connected</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = UITD_GPRS_SZJS_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2fa]"></a>UITD_GPRS_disconnect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_GPRS_disconnect &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_disconnect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2fc]"></a>UITD_GPRS_disconnected</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_GPRS_disconnected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2fd]"></a>UITD_GPRS_send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = UITD_GPRS_send &rArr; GPRS_srv_write &rArr; GSM_srv_AT_SISW_data &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2fe]"></a>UITD_GPRS_received</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_GPRS_received &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[2ff]"></a>UITD_GPRS_report_IP</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UITD_GPRS_report_IP &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[300]"></a>UITD_GPRS_XFZD_connected</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = UITD_GPRS_XFZD_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_2_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>rt_thread_entry_UITD_main</STRONG> (Thumb, 784 bytes, Stack size 32 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = rt_thread_entry_UITD_main &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>rt_thread_entry_UITD_2_main</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = rt_thread_entry_UITD_2_main &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>rt_thread_entry_UITD_GPRS_rec</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = rt_thread_entry_UITD_GPRS_rec &rArr; UITD_server &rArr; UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>sys_fw_upgrade</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = sys_fw_upgrade &rArr; UITD_firmware_upgrade &rArr; UITD_file_req_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_firmware_upgrade
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(FSymTab)
</UL>
<P><STRONG><a name="[309]"></a>sys_file_download_success</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sys_file_download_success &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[30a]"></a>sys_file_download_fail</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sys_file_download_fail &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>sys_file_download</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = sys_file_download &rArr; UITD_download_file &rArr; UITD_file_req_length_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(FSymTab)
</UL>
<P><STRONG><a name="[15c]"></a>sys_sensor_send_data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = sys_sensor_send_data &rArr; UITD_sensor_upload_rough_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_upload_rough_data
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(FSymTab)
</UL>
<P><STRONG><a name="[15d]"></a>sys_upload_file_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = sys_upload_file_info &rArr; UITD_file_upload_file_info &rArr; file_get_CRC16 &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(FSymTab)
</UL>
<P><STRONG><a name="[15e]"></a>UITD_server_info</STRONG> (Thumb, 1208 bytes, Stack size 48 bytes, uitd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = UITD_server_info &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_main.o(FSymTab)
</UL>
<P><STRONG><a name="[30f]"></a>eth_connect</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = eth_connect &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_connect
</UL>

<P><STRONG><a name="[310]"></a>eth_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = eth_disconnect &rArr; lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnect
</UL>

<P><STRONG><a name="[311]"></a>UITD_eth_send</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = UITD_eth_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[312]"></a>UITD_eth_connect</STRONG> (Thumb, 120 bytes, Stack size 128 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UITD_eth_connect &rArr; eth_connect &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[313]"></a>UITD_eth_SZJS_connected</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_eth_SZJS_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>UITD_eth_disconnect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UITD_eth_disconnect &rArr; eth_disconnect &rArr; lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_disconnect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[315]"></a>UITD_eth_disconnected</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_eth_disconnected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[316]"></a>UITD_eth_received</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_eth_received &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[317]"></a>UITD_eth_report_IP</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UITD_eth_report_IP &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[318]"></a>UITD_eth_XFZD_connected</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_eth_XFZD_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_2_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>rt_thread_entry_UITD_eth</STRONG> (Thumb, 1074 bytes, Stack size 40 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_entry_UITD_eth &rArr; UITD_connect &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>rt_thread_entry_eth_rx</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rt_thread_entry_eth_rx &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>rt_thread_entry_UITD_eth_2</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = rt_thread_entry_UITD_eth_2 &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>rt_thread_entry_eth_rx_2</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rt_thread_entry_eth_rx_2 &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>rt_thread_entry_UITD_eth_rec</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = rt_thread_entry_UITD_eth_rec &rArr; UITD_server &rArr; UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>UITD_eth_server_info</STRONG> (Thumb, 1312 bytes, Stack size 48 bytes, uitd_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = UITD_eth_server_info &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_eth.o(FSymTab)
</UL>
<P><STRONG><a name="[31a]"></a>assert_failed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[31b]"></a>rtthread_startup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[325]"></a>SYS_print_hex_dump</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYS_print_hex_dump &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_ack_88_28_U_UITD_TIME
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
</UL>

<P><STRONG><a name="[326]"></a>Print_caller_adr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[7bd]"></a>parity_check_uchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>SYS_SoftReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
</UL>

<P><STRONG><a name="[160]"></a>sys_reboot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot_if_0
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot_if
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[161]"></a>sys_shutdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[162]"></a>sys_reboot_if</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sys_reboot_if
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[163]"></a>sys_reboot_if_0</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sys_reboot_if_0
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[164]"></a>cat_bin</STRONG> (Thumb, 198 bytes, Stack size 112 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cat_bin &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[165]"></a>cat_flash</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cat_flash &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[166]"></a>touch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[167]"></a>append</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = append &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[168]"></a>upgrade</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = upgrade &rArr; touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[169]"></a>sys_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_delay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[16a]"></a>log_trace_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = log_trace_reset &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[16b]"></a>sys_log_level_amend</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_log_level_amend &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[2d7]"></a>disk_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = disk_free &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[32e]"></a>file_get_length</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = file_get_length &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
</UL>

<P><STRONG><a name="[330]"></a>file_get_CRC16</STRONG> (Thumb, 124 bytes, Stack size 536 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = file_get_CRC16 &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
</UL>

<P><STRONG><a name="[16c]"></a>console_enable_login</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = console_enable_login &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(FSymTab)
</UL>
<P><STRONG><a name="[1d5]"></a>rt_ext_strlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1d6]"></a>rt_ext_atoi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ext_atoi &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1d7]"></a>rt_ext_strstr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_ext_strstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[333]"></a>UITD_print_hex_dump</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[334]"></a>UITD_cb_ack_deal_somke_alarm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>

<P><STRONG><a name="[335]"></a>UITD_cb_send_fail_somke_alarm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>

<P><STRONG><a name="[7be]"></a>UITD_net_send_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>UITD_send_pkt_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[337]"></a>UITD_file_open</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UITD_file_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[338]"></a>UITD_file_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UITD_file_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[339]"></a>UITD_create_dev_type</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UITD_create_dev_type &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
</UL>

<P><STRONG><a name="[33a]"></a>file_trans_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = file_trans_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
</UL>

<P><STRONG><a name="[33b]"></a>file_trans_store_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = file_trans_store_data &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[33c]"></a>file_trans_clean_repeat</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>

<P><STRONG><a name="[303]"></a>UITD_file_trans_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_file_trans_init &rArr; file_trans_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
</UL>

<P><STRONG><a name="[302]"></a>UITD_init</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_create_dev_type
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
</UL>

<P><STRONG><a name="[33d]"></a>UITD_destroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[7bf]"></a>UITD_listen</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, uitd.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>UITD_send_node_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_init
</UL>

<P><STRONG><a name="[33e]"></a>UITD_service_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UITD_service_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
</UL>

<P><STRONG><a name="[304]"></a>UITD_connect</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UITD_connect &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
</UL>

<P><STRONG><a name="[38b]"></a>UITD_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[7c0]"></a>UITD_server_clean_node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>UITD_server_request_node</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>

<P><STRONG><a name="[37e]"></a>UITD_server_search_node</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UITD_server_search_node
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[7c1]"></a>UITD_server_release_node</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>UITD_parse</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UITD_parse &rArr; rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
</UL>

<P><STRONG><a name="[342]"></a>UITD_decode</STRONG> (Thumb, 830 bytes, Stack size 48 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = UITD_decode &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
</UL>

<P><STRONG><a name="[30c]"></a>UITD_get_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UITD_get_time &rArr; rt_time &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sensor_send_data
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_mult_ack
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_ack
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_ack_rough_data
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_ack_88_28_U_UITD_TIME
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_fill_ctrl
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_send_data_mq
</UL>

<P><STRONG><a name="[344]"></a>UITD_trans_time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UITD_trans_time &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
</UL>

<P><STRONG><a name="[345]"></a>UITD_set_time</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UITD_set_time &rArr; set_time_date &rArr; rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[348]"></a>UITD_fill_ctrl</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UITD_fill_ctrl &rArr; UITD_get_time &rArr; rt_time &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>

<P><STRONG><a name="[349]"></a>UITD_send_data</STRONG> (Thumb, 674 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_fill_ctrl
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server_request_node
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data_no_SN
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack
</UL>

<P><STRONG><a name="[34b]"></a>UITD_send_ack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_send_ack &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_ack
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deny
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_affirm
</UL>

<P><STRONG><a name="[34c]"></a>UITD_affirm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_affirm &rArr; UITD_send_ack &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[34d]"></a>UITD_deny</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_deny &rArr; UITD_send_ack &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
</UL>

<P><STRONG><a name="[34e]"></a>UITD_ack</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack
</UL>

<P><STRONG><a name="[34f]"></a>UITD_send_actively</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_upload_rough_data
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_report
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_report
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_length_info
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_info
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_alive_pkt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
</UL>

<P><STRONG><a name="[350]"></a>UITD_send_ack_data</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_cfg_mult_ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_cfg_ack
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_mult_ack
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_ack
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_output_ctrl_check_mult_ack
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_ID_check_ack
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_cfg_check_ack
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_ack_rough_data
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_check_ack
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_info_ack
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_ack_88_28_U_UITD_TIME
</UL>

<P><STRONG><a name="[351]"></a>UITD_send_data_no_SN</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_testing_data
</UL>

<P><STRONG><a name="[352]"></a>UITD_ack_88_28_U_UITD_TIME</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UITD_ack_88_28_U_UITD_TIME &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[353]"></a>UITD_send_2_U_FIRE_DEV_STATUS</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>

<P><STRONG><a name="[7f]"></a>UITD_trans_data_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uitd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[354]"></a>UITD_send_alive_pkt</STRONG> (Thumb, 72 bytes, Stack size 1104 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = UITD_send_alive_pkt &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[355]"></a>UITD_send_testing_data</STRONG> (Thumb, 66 bytes, Stack size 1112 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data_no_SN
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[7c2]"></a>UITD_file_rec_file_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uitd.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>UITD_file_req_pkt</STRONG> (Thumb, 84 bytes, Stack size 1104 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = UITD_file_req_pkt &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt_failed
</UL>

<P><STRONG><a name="[7e]"></a>UITD_file_req_pkt_failed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = UITD_file_req_pkt_failed &rArr; UITD_file_req_pkt &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[357]"></a>UITD_dir_request_ack</STRONG> (Thumb, 836 bytes, Stack size 1376 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[359]"></a>UITD_file_data_request_ack</STRONG> (Thumb, 242 bytes, Stack size 1056 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = UITD_file_data_request_ack &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deny
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[35a]"></a>UITD_file_info_ack</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UITD_file_info_ack &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[35b]"></a>UITD_file_req_info</STRONG> (Thumb, 90 bytes, Stack size 1112 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = UITD_file_req_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_firmware_upgrade
</UL>

<P><STRONG><a name="[35c]"></a>UITD_file_req_length_info</STRONG> (Thumb, 90 bytes, Stack size 1168 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = UITD_file_req_length_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
</UL>

<P><STRONG><a name="[30e]"></a>UITD_file_upload_file_info</STRONG> (Thumb, 236 bytes, Stack size 1184 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = UITD_file_upload_file_info &rArr; file_get_CRC16 &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_length
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_upload_file_info
</UL>

<P><STRONG><a name="[35d]"></a>UITD_IOT_GW_info_report</STRONG> (Thumb, 136 bytes, Stack size 1128 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[35e]"></a>UITD_IOT_GW_info_check_ack</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = UITD_IOT_GW_info_check_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[35f]"></a>UITD_transparent_send_data</STRONG> (Thumb, 130 bytes, Stack size 1112 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = UITD_transparent_send_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
</UL>

<P><STRONG><a name="[30d]"></a>UITD_sensor_upload_rough_data</STRONG> (Thumb, 118 bytes, Stack size 1128 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = UITD_sensor_upload_rough_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sensor_send_data
</UL>

<P><STRONG><a name="[360]"></a>UITD_sensor_ack_rough_data</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_sensor_ack_rough_data &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[361]"></a>UITD_sensor_cfg_check_ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UITD_sensor_cfg_check_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[362]"></a>UITD_sensor_ID_check_ack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UITD_sensor_ID_check_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[363]"></a>UITD_output_ctrl_check_mult_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UITD_output_ctrl_check_mult_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[364]"></a>UITD_IO_state_report</STRONG> (Thumb, 102 bytes, Stack size 1120 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = UITD_IO_state_report &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[365]"></a>UITD_IO_state_ack</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>

<P><STRONG><a name="[366]"></a>UITD_IO_state_mult_ack</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_IO_state_mult_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[367]"></a>UITD_IO_state_cfg_ack</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>

<P><STRONG><a name="[368]"></a>UITD_IO_state_cfg_mult_ack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UITD_IO_state_cfg_mult_ack &rArr; UITD_send_ack_data &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_ack_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[369]"></a>UITD_send_dev_status</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UITD_send_dev_status &rArr; UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_disable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_resume
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_fault
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_alarm
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_manul_fire_alarm
</UL>

<P><STRONG><a name="[36b]"></a>UITD_send_manul_fire_alarm</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = UITD_send_manul_fire_alarm &rArr; UITD_send_dev_status &rArr; UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[36c]"></a>UITD_send_smoke_fire_alarm</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = UITD_send_smoke_fire_alarm &rArr; UITD_send_dev_status &rArr; UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[36d]"></a>UITD_send_smoke_fire_fault</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = UITD_send_smoke_fire_fault &rArr; UITD_send_dev_status &rArr; UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[36e]"></a>UITD_send_smoke_fire_resume</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = UITD_send_smoke_fire_resume &rArr; UITD_send_dev_status &rArr; UITD_send_2_U_FIRE_DEV_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[36f]"></a>UITD_send_smoke_fire_disable</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
</UL>

<P><STRONG><a name="[370]"></a>UITD_send_21_U_UITD_STATUS</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = UITD_send_21_U_UITD_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_inital_status
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_backup_power_fault
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_main_power_fault
</UL>

<P><STRONG><a name="[371]"></a>UITD_send_24_U_UITD_OPERATE</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_reset
</UL>

<P><STRONG><a name="[372]"></a>UITD_send_1_U_FIRE_SYS_STATUS</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_send_1_U_FIRE_SYS_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_fire_sys_main_power_fault
</UL>

<P><STRONG><a name="[373]"></a>UITD_send_4_U_FIRE_SYS_OPERATE</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_FA_reset
</UL>

<P><STRONG><a name="[374]"></a>UITD_send_200_U_ROUGH_DATA</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_actively
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_comm_rough_data
</UL>

<P><STRONG><a name="[375]"></a>UITD_send_fire_sys_main_power_fault</STRONG> (Thumb, 62 bytes, Stack size 1112 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = UITD_send_fire_sys_main_power_fault &rArr; UITD_send_1_U_FIRE_SYS_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[376]"></a>UITD_send_UITD_main_power_fault</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
</UL>

<P><STRONG><a name="[377]"></a>UITD_send_FA_reset</STRONG> (Thumb, 58 bytes, Stack size 1120 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[378]"></a>UITD_send_UITD_reset</STRONG> (Thumb, 50 bytes, Stack size 1104 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[379]"></a>UITD_send_UITD_backup_power_fault</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
</UL>

<P><STRONG><a name="[37b]"></a>UITD_send_inital_status_ack_deal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uitd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[37a]"></a>UITD_send_UITD_inital_status</STRONG> (Thumb, 50 bytes, Stack size 1104 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = UITD_send_UITD_inital_status &rArr; UITD_send_21_U_UITD_STATUS &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[37c]"></a>UITD_send_comm_rough_data</STRONG> (Thumb, 30 bytes, Stack size 1104 bytes, uitd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[37f]"></a>UITD_CMD_if_support</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UITD_CMD_if_support
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
</UL>

<P><STRONG><a name="[37d]"></a>UITD_deal</STRONG> (Thumb, 6216 bytes, Stack size 120 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_CMD_if_support
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_cfg_mult_ack
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_mult_ack
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_output_ctrl_check_mult_ack
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_ID_check_ack
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_cfg_check_ack
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_ack_rough_data
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_check_ack
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_info_ack
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_ack_88_28_U_UITD_TIME
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deny
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_affirm
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_set_time
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server_search_node
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_store_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
</UL>

<P><STRONG><a name="[380]"></a>Sj_FillBuf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
</UL>

<P><STRONG><a name="[381]"></a>CRC16_Buf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
</UL>

<P><STRONG><a name="[319]"></a>UITD_SJ3208_send_pkg</STRONG> (Thumb, 750 bytes, Stack size 104 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = UITD_SJ3208_send_pkg &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Buf
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sj_FillBuf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
</UL>

<P><STRONG><a name="[382]"></a>UITD_send_pkg</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UITD_send_pkg &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
</UL>

<P><STRONG><a name="[306]"></a>UITD_send_handler</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = UITD_send_handler &rArr; UITD_send_pkg &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
</UL>

<P><STRONG><a name="[383]"></a>UITD_dl_file_success</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_dl_file_success &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[384]"></a>UITD_dl_file_fail</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_dl_file_fail &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[385]"></a>UITD_dl_firmware_success</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UITD_dl_firmware_success &rArr; touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[386]"></a>UITD_download_firmware</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UITD_download_firmware
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_fail
</UL>

<P><STRONG><a name="[387]"></a>UITD_dl_firmware_fail</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_dl_firmware_fail &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_firmware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd.o(.text)
</UL>
<P><STRONG><a name="[388]"></a>file_get_name</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = file_get_name &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
</UL>

<P><STRONG><a name="[30b]"></a>UITD_download_file</STRONG> (Thumb, 80 bytes, Stack size 280 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = UITD_download_file &rArr; UITD_file_req_length_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_name
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_length_info
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download
</UL>

<P><STRONG><a name="[389]"></a>UITD_update_file</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UITD_update_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[308]"></a>UITD_firmware_upgrade</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = UITD_firmware_upgrade &rArr; UITD_file_req_info &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_info
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_fw_upgrade
</UL>

<P><STRONG><a name="[38a]"></a>UITD_firmware_parse</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UITD_firmware_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
</UL>

<P><STRONG><a name="[305]"></a>UITD_service_handler</STRONG> (Thumb, 1902 bytes, Stack size 1144 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_upload_rough_data
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_firmware_parse
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_update_file
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_firmware
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_inital_status
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_FA_reset
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_fire_sys_main_power_fault
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_resume
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_fault
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_smoke_fire_alarm
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_manul_fire_alarm
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_report
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_alive_pkt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_disconnect
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
</UL>

<P><STRONG><a name="[307]"></a>UITD_server</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = UITD_server &rArr; UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_rec
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI_rec
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_GPRS_rec
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rec
</UL>

<P><STRONG><a name="[390]"></a>sys_power_manage_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys_status.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[38f]"></a>sys_ctrl_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_status.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[2da]"></a>sys_status_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_status.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_server
</UL>

<P><STRONG><a name="[38c]"></a>sys_ctrl_handler</STRONG> (Thumb, 1652 bytes, Stack size 24 bytes, sys_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_ctrl_handler &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[391]"></a>sys_ctrl_server</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_status.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[38d]"></a>sys_battery_server</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, sys_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_battery_server &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_sample
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
</UL>

<P><STRONG><a name="[7c]"></a>rt_thread_entry_sys_status</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sys_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rt_thread_entry_sys_status &rArr; testing_status_check &rArr; create_testing_log &rArr; touch &rArr; rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_server
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ctrl_server
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ctrl_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ctrl_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_manage_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>rt_thread_entry_sensor_sample</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, sensor_sample.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_thread_entry_sensor_sample &rArr; json_cfg_load_AP01 &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server_testing
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[39b]"></a>com_bus_rx_ind</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = com_bus_rx_ind &rArr; rt_event_send &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(.text)
</UL>
<P><STRONG><a name="[7c3]"></a>com_bus_tx_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fire_alarm.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>com_bus_config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = com_bus_config &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server_testing
</UL>

<P><STRONG><a name="[39d]"></a>com_bus_server_testing</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = com_bus_server_testing &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_config
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
</UL>

<P><STRONG><a name="[39e]"></a>com_bus_server</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = com_bus_server &rArr; com_bus_config &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_config
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
</UL>

<P><STRONG><a name="[39f]"></a>com_bus_testing_parser</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = com_bus_testing_parser &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm_rx
</UL>

<P><STRONG><a name="[3a0]"></a>FAC_usual_rx_parser</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = FAC_usual_rx_parser &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(.text)
</UL>
<P><STRONG><a name="[3a1]"></a>FAC_alarm_data_element_parse</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FAC_alarm_data_element_parse &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_alarm_data_parse
</UL>

<P><STRONG><a name="[1dc]"></a>fire_alarm_struct_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fire_alarm_struct_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_alarm_data_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1dd]"></a>FAC_alarm_data_parse</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FAC_alarm_data_parse &rArr; FAC_alarm_data_element_parse &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_struct_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_alarm_data_element_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1de]"></a>FA_mq_fire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_fire &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1df]"></a>FA_mq_fire_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_fire_2 &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e0]"></a>FA_mq_fault</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_fault &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e1]"></a>FA_mq_fault_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_fault_2 &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e2]"></a>FA_mq_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_reset &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e3]"></a>FA_mq_reset_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FA_mq_reset_2 &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(RTMSymTab)
</UL>
<P><STRONG><a name="[3a2]"></a>FAC_usual_rx_handler</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FAC_usual_rx_handler &rArr; FAC_alarm_data_parse &rArr; FAC_alarm_data_element_parse &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_alarm_data_parse
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_struct_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(.text)
</UL>
<P><STRONG><a name="[3a3]"></a>FAC_usual_server</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FAC_usual_server &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(.text)
</UL>
<P><STRONG><a name="[3a6]"></a>FAC_config_find</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FAC_config_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
</UL>

<P><STRONG><a name="[3a4]"></a>FAC_config_load</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FAC_config_load &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
</UL>

<P><STRONG><a name="[3a5]"></a>com_bus_init</STRONG> (Thumb, 1014 bytes, Stack size 96 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = com_bus_init &rArr; dlopen &rArr; rt_module_open &rArr; rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlsym
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_config_load
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_config_find
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
</UL>

<P><STRONG><a name="[75]"></a>rt_thread_entry_fire_alarm</STRONG> (Thumb, 1176 bytes, Stack size 0 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rt_thread_entry_fire_alarm &rArr; com_bus_init &rArr; dlopen &rArr; rt_module_open &rArr; rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server_testing
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>rt_thread_entry_fire_alarm_rx</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_entry_fire_alarm_rx &rArr; com_bus_testing_parser &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>fire_alarm_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fire_alarm_send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(FSymTab)
</UL>
<P><STRONG><a name="[16e]"></a>fire_alarm_IO_out</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fire_alarm_IO_out &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(FSymTab)
</UL>
<P><STRONG><a name="[16f]"></a>fire_alarm_controller_list</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fire_alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fire_alarm_controller_list &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_alarm.o(FSymTab)
</UL>
<P><STRONG><a name="[77]"></a>rt_thread_entry_ctrl_in</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_entry_ctrl_in &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>rt_thread_entry_ctrl_out</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_entry_ctrl_out &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[3aa]"></a>module_BLE_rx_ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = module_BLE_rx_ind &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3ab]"></a>module_BLE_tx_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[2ce]"></a>module_BLE_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = module_BLE_init &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[3ad]"></a>BLE_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_connect
</UL>

<P><STRONG><a name="[3ac]"></a>UITD_BLE_connect</STRONG> (Thumb, 28 bytes, Stack size 36 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UITD_BLE_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3b2]"></a>UITD_BLE_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3b1]"></a>UITD_BLE_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3b0]"></a>UITD_BLE_disconnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3ae]"></a>UITD_BLE_send</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UITD_BLE_send &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_ble.o(.text)
</UL>
<P><STRONG><a name="[3af]"></a>UITD_BLE_received</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_BLE_received &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
</UL>

<P><STRONG><a name="[60]"></a>rt_thread_entry_UITD_BLE</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = rt_thread_entry_UITD_BLE &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>rt_thread_entry_UITD_BLE_rx</STRONG> (Thumb, 90 bytes, Stack size 1056 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = rt_thread_entry_UITD_BLE_rx &rArr; UITD_BLE_received &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_received
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>rt_thread_entry_UITD_BLE_rec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uitd_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = rt_thread_entry_UITD_BLE_rec &rArr; UITD_server &rArr; UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[3b3]"></a>UITD_WIFI_listen_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_write
</UL>

<P><STRONG><a name="[7c4]"></a>UITD_WIFI_listen_listen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>UITD_WIFI_listen_disconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[7c6]"></a>UITD_WIFI_listen_received</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[7c7]"></a>UITD_WIFI_listen_accepted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[7c8]"></a>UITD_WIFI_listen_report_IP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uitd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>UITD_WIFI_connect</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UITD_WIFI_connect &rArr; WIFI_connect &rArr; WIFI_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3b7]"></a>UITD_WIFI_SZJS_connected</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = UITD_WIFI_SZJS_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3b8]"></a>UITD_WIFI_disconnect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_WIFI_disconnect &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3ba]"></a>UITD_WIFI_disconnected</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_WIFI_disconnected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3bb]"></a>UITD_WIFI_send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UITD_WIFI_send &rArr; WIFI_srv_write &rArr; ESP_srv_AT_SEND_data &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3bc]"></a>UITD_WIFI_received</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UITD_WIFI_received &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3bd]"></a>UITD_WIFI_report_IP</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UITD_WIFI_report_IP &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[3be]"></a>UITD_WIFI_XFZD_connected</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = UITD_WIFI_XFZD_connected &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_handler_2_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>rt_thread_entry_UITD_WIFI</STRONG> (Thumb, 852 bytes, Stack size 32 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = rt_thread_entry_UITD_WIFI &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>rt_thread_entry_UITD_2_WIFI</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = rt_thread_entry_UITD_2_WIFI &rArr; UITD_service_handler &rArr; UITD_send_FA_reset &rArr; UITD_send_4_U_FIRE_SYS_OPERATE &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_trans_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>rt_thread_entry_UITD_WIFI_rec</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = rt_thread_entry_UITD_WIFI_rec &rArr; UITD_server &rArr; UITD_deal &rArr; UITD_dir_request_ack &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>UITD_WIFI_server_info</STRONG> (Thumb, 1322 bytes, Stack size 48 bytes, uitd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = UITD_WIFI_server_info &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uitd_wifi.o(FSymTab)
</UL>
<P><STRONG><a name="[3c1]"></a>transparent_rx_ind</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, transparent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> transparent.o(.text)
</UL>
<P><STRONG><a name="[3c2]"></a>transparent_tx_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, transparent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> transparent.o(.text)
</UL>
<P><STRONG><a name="[3bf]"></a>transparent_config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = transparent_config &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
</UL>

<P><STRONG><a name="[3c0]"></a>transparent_init</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = transparent_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_config
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
</UL>

<P><STRONG><a name="[3c3]"></a>transparent_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, transparent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[3c4]"></a>transparent_server_send_pkg</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = transparent_server_send_pkg &rArr; UITD_transparent_send_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_trans_time
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server
</UL>

<P><STRONG><a name="[3c5]"></a>transparent_server</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = transparent_server &rArr; transparent_server_send_pkg &rArr; UITD_transparent_send_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
</UL>

<P><STRONG><a name="[3c6]"></a>transparent_rx_parse</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = transparent_rx_parse &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent_rx
</UL>

<P><STRONG><a name="[72]"></a>rt_thread_entry_transparent</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_thread_entry_transparent &rArr; transparent_server &rArr; transparent_server_send_pkg &rArr; UITD_transparent_send_data &rArr; UITD_send_actively &rArr; UITD_send_data &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>rt_thread_entry_transparent_rx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, transparent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_entry_transparent_rx &rArr; transparent_rx_parse &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[3c8]"></a>PRO_IO_input_read_port</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pro_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PRO_IO_input_read_port &rArr; MCP_23X17_input &rArr; MCP23017_ReadPortB &rArr; ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pro_ctrl.o(.text)
</UL>
<P><STRONG><a name="[3ce]"></a>PRO_IO_input_read_pin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pro_ctrl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pro_ctrl.o(.text)
</UL>
<P><STRONG><a name="[3ca]"></a>PRO_output_write_port</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pro_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PRO_output_write_port &rArr; MCP_23X17_output_bit &rArr; MCP23017_SetIOPortA &rArr; SetRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_output_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pro_ctrl.o(.text)
</UL>
<P><STRONG><a name="[3cc]"></a>PRO_output_write_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pro_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PRO_output_write_pin &rArr; MCP_23X17_output_bit &rArr; MCP23017_SetIOPortA &rArr; SetRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_output_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pro_ctrl.o(.text)
</UL>
<P><STRONG><a name="[3cd]"></a>PRO_IO_input_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pro_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_pin_cfg
</UL>

<P><STRONG><a name="[7a]"></a>rt_thread_entry_PRO_CTRL</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, pro_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_thread_entry_PRO_CTRL &rArr; json_cfg_load_PRO_CTRL &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server_testing
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>rt_thread_entry_PRO_UITD</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, pro_uitd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_thread_entry_PRO_UITD &rArr; json_cfg_load_PRO_UITD &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[3d3]"></a>NVIC_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3d6]"></a>IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>

<P><STRONG><a name="[3dc]"></a>SysTick_Configuration</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2df]"></a>mco_config</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mco_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>

<P><STRONG><a name="[3e5]"></a>rt_hw_tick_get_millisecond</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[3e6]"></a>rt_hw_tick_get_microsecond</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[480]"></a>sys_get_mother_board_type</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_get_mother_board_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
</UL>

<P><STRONG><a name="[482]"></a>sys_get_ext_board_type</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_get_ext_board_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
</UL>

<P><STRONG><a name="[483]"></a>sys_get_ext_module_type</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_get_ext_module_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
</UL>

<P><STRONG><a name="[2ed]"></a>sys_get_mother_board_string</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_get_mother_board_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
</UL>

<P><STRONG><a name="[2ef]"></a>sys_get_ext_dev_module_string</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_get_ext_dev_module_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
</UL>

<P><STRONG><a name="[31c]"></a>rt_hw_board_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_open &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pin_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EXTI15_10_IRQHandler &rArr; VK32xx_IRQ &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_IRQ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART1_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART2_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART3_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UART4_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UART5_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART6_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART6_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e7]"></a>stm32_hw_usart_init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3f9]"></a>stm32_hw_usart_assign</STRONG> (Thumb, 820 bytes, Stack size 80 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = stm32_hw_usart_assign &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[3fd]"></a>rt_mktime</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ack_parser
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[401]"></a>RTC_Config</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Config &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[406]"></a>RTC_alarm_cfg</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_alarm_cfg &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[40c]"></a>RTC_Configuration</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Configuration &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[40e]"></a>rt_hw_rtc_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_hw_rtc_init &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[2ec]"></a>rt_time</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_time &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_record
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_IO_input_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
</UL>

<P><STRONG><a name="[171]"></a>set_date</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_date &rArr; rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[172]"></a>set_time</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_time &rArr; rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[347]"></a>set_time_date</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_time_date &rArr; rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_set_time
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_UTC
</UL>

<P><STRONG><a name="[173]"></a>time_BKR_record</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = time_BKR_record &rArr; rt_time &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[40f]"></a>time_BKR_replay</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
</UL>

<P><STRONG><a name="[174]"></a>time_BKR_display</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = time_BKR_display &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[410]"></a>rt_set_UTC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
</UL>

<P><STRONG><a name="[175]"></a>list_date</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = list_date &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[416]"></a>rt_hw_gpio_init</STRONG> (Thumb, 898 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_hw_gpio_init &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[2cd]"></a>rt_platform_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_platform_init &rArr; w25qxx_init &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gpio_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[419]"></a>GSM_srv_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GSM_srv_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
</UL>

<P><STRONG><a name="[41a]"></a>GSM_srv_phaser</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GSM_srv_phaser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_rx_check
</UL>

<P><STRONG><a name="[41b]"></a>GSM_srv_send_data</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISW_data
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISC
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO_info
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_name
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_ip
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_listen
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_IOMODE
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_TYPE
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS_APN
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGATT
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CSQ
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGSN
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CPIN
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SWSPATH
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATI
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATE
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_AT
</UL>

<P><STRONG><a name="[41c]"></a>GSM_srv_AT_AT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_AT &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[41d]"></a>GSM_srv_ATE</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_ATE &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[41e]"></a>GSM_srv_ATI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_ATI &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[41f]"></a>GSM_srv_AT_SWSPATH</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SWSPATH &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[420]"></a>GSM_srv_AT_CPIN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_CPIN &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[421]"></a>GSM_srv_AT_CGSN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_CGSN &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[422]"></a>GSM_srv_AT_CSQ</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_CSQ &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[423]"></a>GSM_srv_AT_CGATT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_CGATT &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[424]"></a>GSM_srv_AT_SICS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SICS &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[425]"></a>GSM_srv_AT_SICS_APN</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SICS_APN &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[426]"></a>GSM_srv_AT_SISS_TYPE</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SISS_TYPE &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[427]"></a>GSM_srv_AT_IOMODE</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_IOMODE &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[428]"></a>GSM_srv_AT_SISS_listen</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GSM_srv_AT_SISS_listen &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[429]"></a>GSM_srv_AT_SISS_ip</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_srv_AT_SISS_ip &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[42a]"></a>GSM_srv_AT_SISS_name</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GSM_srv_AT_SISS_name &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[42b]"></a>GSM_srv_AT_SISO</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SISO &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[42c]"></a>GSM_srv_AT_SISO_info</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SISO_info &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[42d]"></a>GSM_srv_AT_SISC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GSM_srv_AT_SISC &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
</UL>

<P><STRONG><a name="[42e]"></a>GSM_srv_AT_SISW_data</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GSM_srv_AT_SISW_data &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_write
</UL>

<P><STRONG><a name="[17b]"></a>GSM_srv_power_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[17c]"></a>GSM_srv_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[17a]"></a>GSM_srv_gprs_down</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_gprs_down_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[430]"></a>GPRS_srv_release</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_gprs_down_force
</UL>

<P><STRONG><a name="[42f]"></a>GPRS_srv_destroy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPRS_srv_destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_gprs_down_force
</UL>

<P><STRONG><a name="[17d]"></a>GSM_srv_gprs_down_force</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GSM_srv_gprs_down_force &rArr; GPRS_srv_destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_destroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_release
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_gprs_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[431]"></a>GSM_srv_ack_parser</STRONG> (Thumb, 1218 bytes, Stack size 40 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GSM_srv_ack_parser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mktime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
</UL>

<P><STRONG><a name="[432]"></a>GPRS_server_rec_handler</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GPRS_server_rec_handler &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
</UL>

<P><STRONG><a name="[433]"></a>GSM_srv_rec_handler</STRONG> (Thumb, 822 bytes, Stack size 32 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GSM_srv_rec_handler &rArr; GSM_srv_ack_parser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ack_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_rx_check
</UL>

<P><STRONG><a name="[434]"></a>GSM_srv_report_deal</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GSM_srv_report_deal &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[435]"></a>GPRS_server_handler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GPRS_server_handler &rArr; GSM_srv_AT_SISS_ip &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_destroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_release
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISC
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO_info
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_name
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_ip
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_listen
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
</UL>

<P><STRONG><a name="[436]"></a>GSM_srv_service</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = GSM_srv_service &rArr; GPRS_server_handler &rArr; GSM_srv_AT_SISS_ip &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_IOMODE
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS_APN
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGATT
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CSQ
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGSN
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CPIN
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SWSPATH
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATI
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATE
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_AT
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
</UL>

<P><STRONG><a name="[437]"></a>GPRS_srv_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPRS_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_listen
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_connect
</UL>

<P><STRONG><a name="[438]"></a>GPRS_srv_attach</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_listen
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_connect
</UL>

<P><STRONG><a name="[7c9]"></a>GPRS_srv_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_mg301.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>GPRS_srv_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GPRS_srv_write &rArr; GSM_srv_AT_SISW_data &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISW_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_listen_send
</UL>

<P><STRONG><a name="[2f7]"></a>GPRS_connect</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPRS_connect &rArr; GPRS_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_attach
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_connect
</UL>

<P><STRONG><a name="[2fb]"></a>GPRS_disconnect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnect
</UL>

<P><STRONG><a name="[2f5]"></a>GPRS_listen</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gsm_mg301.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_attach
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_listen_listen
</UL>

<P><STRONG><a name="[439]"></a>GSM_MG301_rx_ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GSM_MG301_rx_ind &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(.text)
</UL>
<P><STRONG><a name="[43b]"></a>GSM_MG301_tx_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(.text)
</UL>
<P><STRONG><a name="[43a]"></a>GSM_rx_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GSM_rx_check &rArr; GSM_srv_rec_handler &rArr; GSM_srv_ack_parser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_phaser
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_rx
</UL>

<P><STRONG><a name="[65]"></a>rt_thread_entry_GSM_rx</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_thread_entry_GSM_rx &rArr; GSM_rx_check &rArr; GSM_srv_rec_handler &rArr; GSM_srv_ack_parser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_rx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>rt_thread_entry_GSM_MG301</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_thread_entry_GSM_MG301 &rArr; GSM_srv_service &rArr; GPRS_server_handler &rArr; GSM_srv_AT_SISS_ip &rArr; GSM_srv_send_data &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_power_on
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>GSM_cmd_init</STRONG> (Thumb, 756 bytes, Stack size 80 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GSM_cmd_init &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[177]"></a>GSM_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GSM_send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[178]"></a>GSM_socket_send</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GSM_socket_send &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[179]"></a>GSM_socket_read</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, gsm_mg301.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GSM_socket_read &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_mg301.o(FSymTab)
</UL>
<P><STRONG><a name="[43c]"></a>ESP_srv_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ESP_srv_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
</UL>

<P><STRONG><a name="[43d]"></a>WIFI_rx_ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WIFI_rx_ind &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_esp_07.o(.text)
</UL>
<P><STRONG><a name="[452]"></a>WIFI_tx_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wifi_esp_07.o(.text)
</UL>
<P><STRONG><a name="[453]"></a>ESP_srv_power_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
</UL>

<P><STRONG><a name="[7ca]"></a>ESP_srv_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_esp_07.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>ESP_srv_phaser</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ESP_srv_phaser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_rx_check
</UL>

<P><STRONG><a name="[43f]"></a>WIFI_server_rec_handler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = WIFI_server_rec_handler &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
</UL>

<P><STRONG><a name="[440]"></a>ESP_srv_ack_parser</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ESP_srv_ack_parser &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
</UL>

<P><STRONG><a name="[441]"></a>ESP_srv_rec_handler</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ESP_srv_rec_handler &rArr; ESP_srv_ack_parser &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_ack_parser
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_rec_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_rx_check
</UL>

<P><STRONG><a name="[442]"></a>WIFI_rx_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WIFI_rx_check &rArr; ESP_srv_phaser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_phaser
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
</UL>

<P><STRONG><a name="[443]"></a>ESP_srv_send_data</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reboot
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPCLOSE
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_AT_CIPSTART
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPMUX
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWJAP
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_RST
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWMODE
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_AT
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_SEND_data
</UL>

<P><STRONG><a name="[444]"></a>ESP_srv_AT_SEND_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ESP_srv_AT_SEND_data &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_write
</UL>

<P><STRONG><a name="[44e]"></a>WIFI_srv_release</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
</UL>

<P><STRONG><a name="[3b4]"></a>WIFI_srv_write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WIFI_srv_write &rArr; ESP_srv_AT_SEND_data &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_SEND_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_listen_send
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_send
</UL>

<P><STRONG><a name="[445]"></a>WIFI_srv_destroy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WIFI_srv_destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
</UL>

<P><STRONG><a name="[446]"></a>ESP_srv_AT_AT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_AT &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[447]"></a>ESP_srv_AT_CWMODE</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_CWMODE &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[448]"></a>ESP_srv_AT_RST</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_RST &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[449]"></a>ESP_srv_AT_CWJAP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_CWJAP &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[44a]"></a>ESP_srv_AT_CIPMUX</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_CIPMUX &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[44b]"></a>WIFI_srv_AT_CIPSTART</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WIFI_srv_AT_CIPSTART &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
</UL>

<P><STRONG><a name="[44c]"></a>ESP_srv_AT_CIPCLOSE</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ESP_srv_AT_CIPCLOSE &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
</UL>

<P><STRONG><a name="[44d]"></a>WIFI_server_handler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WIFI_server_handler &rArr; WIFI_srv_AT_CIPSTART &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPCLOSE
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_AT_CIPSTART
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_destroy
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_release
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
</UL>

<P><STRONG><a name="[44f]"></a>WIFI_srv_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WIFI_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_connect
</UL>

<P><STRONG><a name="[450]"></a>WIFI_srv_attach</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_connect
</UL>

<P><STRONG><a name="[7cb]"></a>WIFI_srv_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_esp_07.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>WIFI_connect</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WIFI_connect &rArr; WIFI_srv_create &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_attach
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_connect
</UL>

<P><STRONG><a name="[3b9]"></a>WIFI_disconnect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnect
</UL>

<P><STRONG><a name="[451]"></a>ESP_srv_service</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ESP_srv_service &rArr; WIFI_server_handler &rArr; WIFI_srv_AT_CIPSTART &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPMUX
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWJAP
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_RST
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWMODE
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_AT
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
</UL>

<P><STRONG><a name="[68]"></a>rt_thread_entry_WIFI_rx</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_entry_WIFI_rx &rArr; WIFI_rx_check &rArr; ESP_srv_phaser &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_rx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>rt_thread_entry_WIFI_ESP_07</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_thread_entry_WIFI_ESP_07 &rArr; ESP_srv_service &rArr; WIFI_server_handler &rArr; WIFI_srv_AT_CIPSTART &rArr; ESP_srv_send_data &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_power_on
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[454]"></a>WIFI_ESP_07_init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WIFI_ESP_07_init &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_init
</UL>

<P><STRONG><a name="[17e]"></a>WIFI_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WIFI_init &rArr; WIFI_ESP_07_init &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ESP_07_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_esp_07.o(FSymTab)
</UL>
<P><STRONG><a name="[17f]"></a>WIFI_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WIFI_send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_esp_07.o(FSymTab)
</UL>
<P><STRONG><a name="[180]"></a>WIFI_socket_send</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, wifi_esp_07.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WIFI_socket_send &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_esp_07.o(FSymTab)
</UL>
<P><STRONG><a name="[45c]"></a>w25qxx_page_write</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_status &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_write
</UL>

<P><STRONG><a name="[418]"></a>w25qxx_init</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = w25qxx_init &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[417]"></a>tim2_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tim2_init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[465]"></a>tim1_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[466]"></a>tim3_init</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46c]"></a>tim4_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tim4_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
</UL>

<P><STRONG><a name="[46]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ADC_init</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ADC_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_sample.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>ADC_PRO_init</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ADC_PRO_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pro_uitd.o(.text)
<LI> pro_ctrl.o(.text)
</UL>
<P><STRONG><a name="[47f]"></a>ADC_get_level</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
</UL>

<P><STRONG><a name="[2c2]"></a>ADC_mother_board_check</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ADC_mother_board_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_mother_board_string
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_mother_board_type
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_get_level
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2c3]"></a>ADC_ext_board_module_check</STRONG> (Thumb, 516 bytes, Stack size 152 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ADC_ext_board_module_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_ext_dev_module_string
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_ext_module_type
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_ext_board_type
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2c4]"></a>ADC_power_battery_init</STRONG> (Thumb, 768 bytes, Stack size 112 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ADC_power_battery_init &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[38e]"></a>ADC_power_battery_sample</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_power_battery_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_server
</UL>

<P><STRONG><a name="[2d0]"></a>msd_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = msd_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[3ed]"></a>VK32xx_IRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VK32xx_IRQ &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[491]"></a>VK32xx_write_reg</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = VK32xx_write_reg &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_control
</UL>

<P><STRONG><a name="[492]"></a>VK32xx_read_reg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = VK32xx_read_reg &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_VK32xx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_control
</UL>

<P><STRONG><a name="[107]"></a>VK32XX_configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.constdata)
</UL>
<P><STRONG><a name="[494]"></a>VK32XX_tx_FIFO_int_en</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_write_FIFO
</UL>

<P><STRONG><a name="[495]"></a>VK32XX_tx_FIFO_int_dis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_control
</UL>

<P><STRONG><a name="[7cc]"></a>VK32XX_tx_FIFO_int_clean</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>VK32XX_write_char</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(FSymTab)
</UL>
<P><STRONG><a name="[182]"></a>VK32XX_write_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(FSymTab)
</UL>
<P><STRONG><a name="[493]"></a>VK32XX_write_FIFO</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, vk3266.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_tx_FIFO_int_en
</UL>

<P><STRONG><a name="[108]"></a>VK32XX_control</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = VK32XX_control &rArr; VK32xx_write_reg &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_tx_FIFO_int_dis
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32XX_tx_FIFO_int_en
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_read_reg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.constdata)
</UL>
<P><STRONG><a name="[496]"></a>VK32xx_HW_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VK32xx_HW_init &rArr; EXTILineX_Config &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILineX_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
</UL>

<P><STRONG><a name="[497]"></a>rt_VK_serial_register</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_VK_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
</UL>

<P><STRONG><a name="[498]"></a>rt_thread_entry_VK32xx</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_thread_entry_VK32xx &rArr; VK32xx_read_reg &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[2cf]"></a>VK32xx_init</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VK32xx_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_VK_serial_register
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_HW_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[49b]"></a>MCP23017_ReadPortB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MCP23017_ReadPortB &rArr; ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_input
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_input_bit
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_Init
</UL>

<P><STRONG><a name="[49d]"></a>MCP23017_SetIOPortA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MCP23017_SetIOPortA &rArr; SetRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_output_bit
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_output
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_Init
</UL>

<P><STRONG><a name="[49e]"></a>MCP23017_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MCP23017_Init &rArr; MCP23017_ReadPortB &rArr; ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_SetIOPortA
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadPortB
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
</UL>

<P><STRONG><a name="[7cd]"></a>MCP23017_SetDeviceAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>MCP23017_ReadPortA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
</UL>

<P><STRONG><a name="[4a0]"></a>MCP23017_ReadIntCapA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
</UL>

<P><STRONG><a name="[4a1]"></a>MCP23017_ReadIntCapB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_23X17_input_INT
</UL>

<P><STRONG><a name="[4a2]"></a>MCP23017_SetIOPortB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
</UL>

<P><STRONG><a name="[4a3]"></a>MCP23017_CheckDevicePresent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
</UL>

<P><STRONG><a name="[3d1]"></a>MCP23X17_hw_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MCP23X17_hw_init &rArr; MCP23017_Init &rArr; MCP23017_ReadPortB &rArr; ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[3cb]"></a>MCP_23X17_output_bit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MCP_23X17_output_bit &rArr; MCP23017_SetIOPortA &rArr; SetRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_SetIOPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_output_write_pin
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_output_write_port
</UL>

<P><STRONG><a name="[4a5]"></a>MCP_23X17_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_SetIOPortA
</UL>

<P><STRONG><a name="[4a6]"></a>MCP_23X17_input_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadPortB
</UL>

<P><STRONG><a name="[3c9]"></a>MCP_23X17_input</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MCP_23X17_input &rArr; MCP23017_ReadPortB &rArr; ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadPortB
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_IO_input_read_port
</UL>

<P><STRONG><a name="[4a7]"></a>MCP_23X17_input_INT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcp23x17.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadIntCapB
</UL>

<P><STRONG><a name="[4a8]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[4aa]"></a>ETH_Init</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[4bb]"></a>ETH_StructInit</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[4b0]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[4af]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[4ae]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[4ad]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[4ac]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[4ab]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7ce]"></a>ETH_HandleTxPkt</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7cf]"></a>ETH_HandleRxPkt</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[4b1]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>

<P><STRONG><a name="[7d0]"></a>ETH_DropRxPkt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d1]"></a>ETH_EnhancedDescriptorCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[4b5]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[4b3]"></a>ETH_PHYLoopBackCmd</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[7d2]"></a>ETH_GetFlowControlBusyStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d3]"></a>ETH_InitiatePauseControlFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d4]"></a>ETH_BackPressureActivationCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d5]"></a>ETH_GetMACFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d6]"></a>ETH_GetMACITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d7]"></a>ETH_MACITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7d8]"></a>ETH_GetMACAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7d9]"></a>ETH_MACAddressPerfectFilterCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7da]"></a>ETH_MACAddressFilterConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7db]"></a>ETH_MACAddressMaskBytesFilterConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7dc]"></a>ETH_DMATxDescRingInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7dd]"></a>ETH_GetDMATxDescFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7de]"></a>ETH_GetDMATxDescCollisionCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7df]"></a>ETH_SetDMATxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e0]"></a>ETH_DMATxDescTransmitITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e1]"></a>ETH_DMATxDescFrameSegmentConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e2]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e3]"></a>ETH_DMATxDescCRCCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e4]"></a>ETH_DMATxDescEndOfRingCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e5]"></a>ETH_DMATxDescSecondAddressChainedCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e6]"></a>ETH_DMATxDescShortFramePaddingCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e7]"></a>ETH_DMATxDescTimeStampCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7e8]"></a>ETH_DMATxDescBufferSizeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7e9]"></a>ETH_DMARxDescRingInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ea]"></a>ETH_GetDMARxDescFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7eb]"></a>ETH_GetDMAPTPRxDescExtendedFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ec]"></a>ETH_SetDMARxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ed]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ee]"></a>ETH_DMARxDescEndOfRingCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ef]"></a>ETH_DMARxDescSecondAddressChainedCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f0]"></a>ETH_GetDMARxDescBufferSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[4ba]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7f1]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f2]"></a>ETH_DMAClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f3]"></a>ETH_GetDMAITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[7f4]"></a>ETH_GetTransmitProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f5]"></a>ETH_GetReceiveProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f6]"></a>ETH_GetFlushTransmitFIFOStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>ETH_DMAITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7f7]"></a>ETH_GetDMAOverflowStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f8]"></a>ETH_GetRxOverflowMissedFrameCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7f9]"></a>ETH_GetBufferUnavailableMissedFrameCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7fa]"></a>ETH_GetCurrentTxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7fb]"></a>ETH_GetCurrentRxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7fc]"></a>ETH_GetCurrentTxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7fd]"></a>ETH_GetCurrentRxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7fe]"></a>ETH_ResumeDMATransmission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[7ff]"></a>ETH_ResumeDMAReception</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[800]"></a>ETH_SetReceiveWatchdogTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[801]"></a>ETH_ResetWakeUpFrameFilterRegisterPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[802]"></a>ETH_SetWakeUpFrameFilterRegister</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[803]"></a>ETH_GlobalUnicastWakeUpCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[804]"></a>ETH_GetPMTFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[805]"></a>ETH_WakeUpFrameDetectionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[806]"></a>ETH_MagicPacketDetectionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[807]"></a>ETH_PowerDownCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[808]"></a>ETH_MMCCounterFullPreset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[809]"></a>ETH_MMCCounterHalfPreset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80a]"></a>ETH_MMCCounterFreezeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80b]"></a>ETH_MMCResetOnReadCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80c]"></a>ETH_MMCCounterRolloverCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80d]"></a>ETH_MMCCountersReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80e]"></a>ETH_MMCITConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[80f]"></a>ETH_GetMMCITStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[810]"></a>ETH_GetMMCRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[811]"></a>ETH_PTPNodeClockTypeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[812]"></a>ETH_PTPSnapshotCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[813]"></a>ETH_PTPPacketSnoopingV2FormatCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[814]"></a>ETH_PTPSubSecondRolloverCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[815]"></a>ETH_EnablePTPTimeStampAddend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[816]"></a>ETH_EnablePTPTimeStampInterruptTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[817]"></a>ETH_EnablePTPTimeStampUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[818]"></a>ETH_InitializePTPTimeStamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[819]"></a>ETH_PTPUpdateMethodConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81a]"></a>ETH_PTPTimeStampCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81b]"></a>ETH_GetPTPFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81c]"></a>ETH_SetPTPSubSecondIncrement</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81d]"></a>ETH_SetPTPTimeStampUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81e]"></a>ETH_SetPTPTimeStampAddend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[81f]"></a>ETH_SetPTPTargetTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[820]"></a>ETH_GetPTPRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[821]"></a>ETH_DMAPTPTxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[822]"></a>ETH_DMAPTPRxDescChainInit</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[823]"></a>ETH_HandlePTPTxPkt</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[824]"></a>ETH_HandlePTPRxPkt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f2xx_eth_lan8720a.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>ETH_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ETH_IRQHandler &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c0]"></a>rt_stm32_eth_tx</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_stm32_eth_tx &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[4c2]"></a>rt_stm32_eth_rx</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_stm32_eth_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[2e1]"></a>rt_hw_stm32_eth_init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>

<P><STRONG><a name="[4c9]"></a>get_pin</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[10a]"></a>stm32_pin_write</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>stm32_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>stm32_pin_mode</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_pin_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>stm32_hw_pin_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[412]"></a>stm32_spi_register</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f20x_40x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[2cc]"></a>rt_hw_i2c_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[a3]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[825]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[3f7]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILineX_Config
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[3d4]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[826]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[47e]"></a>ADC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
</UL>

<P><STRONG><a name="[477]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[827]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[828]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_sample
</UL>

<P><STRONG><a name="[829]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[82a]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[82b]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[82c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[82d]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[47b]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_sample
</UL>

<P><STRONG><a name="[82e]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[82f]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[830]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[831]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[832]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_sample
</UL>

<P><STRONG><a name="[833]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>ADC_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
</UL>

<P><STRONG><a name="[479]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[834]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[835]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[836]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[837]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[838]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[839]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83a]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83b]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83c]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83d]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83e]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[83f]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_sample
</UL>

<P><STRONG><a name="[840]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[841]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[842]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[473]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[843]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[844]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[845]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[846]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[847]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[848]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[849]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[84a]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[84b]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[84c]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[84d]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[470]"></a>DMA_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[475]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[84e]"></a>DMA_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[84f]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILineX_Config
</UL>

<P><STRONG><a name="[850]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[851]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[852]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[853]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[3eb]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[4d8]"></a>GPIO_DeInit</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[3e2]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[854]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[855]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_scl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_sda
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[856]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[857]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[858]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_scl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_sda
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[4c7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_scl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_sda
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[859]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[85a]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[85b]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[3d7]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[3d8]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[3d9]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[3da]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[3db]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[85c]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[3fe]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[85d]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[85e]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[85f]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[860]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[861]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[862]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[863]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[864]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[865]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[866]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[867]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[4db]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[868]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[869]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>RCC_LSEConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[86a]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86b]"></a>RCC_PLLConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86d]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86e]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86f]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
</UL>

<P><STRONG><a name="[870]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[871]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[872]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[873]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[874]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[875]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[404]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[405]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[876]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[877]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[878]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[879]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
</UL>

<P><STRONG><a name="[3e0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mco_config
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILineX_Config
</UL>

<P><STRONG><a name="[4a9]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[87a]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[87b]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[4d7]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[87c]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[87d]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[87e]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[87f]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[880]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[881]"></a>RCC_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[882]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[883]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[884]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_display
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_replay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_record
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[4dd]"></a>RTC_EnterInitMode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[4dc]"></a>RTC_DeInit</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[4de]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
</UL>

<P><STRONG><a name="[40d]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[885]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[886]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>RTC_RefClockCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[3ff]"></a>RTC_SetTime</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[887]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[400]"></a>RTC_SetDate</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[888]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>RTC_GetDate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[409]"></a>RTC_SetAlarm</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
</UL>

<P><STRONG><a name="[889]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>RTC_GetAlarm</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[408]"></a>RTC_AlarmCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
</UL>

<P><STRONG><a name="[88a]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[88b]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[88c]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[88d]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[88e]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[88f]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[890]"></a>RTC_OutputConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[4e4]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[891]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[892]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[893]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[894]"></a>RTC_TamperCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_record
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[2d1]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_display
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_replay
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[895]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[896]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[897]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>RTC_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
</UL>

<P><STRONG><a name="[898]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>RTC_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_alarm_cfg
</UL>

<P><STRONG><a name="[3e9]"></a>RTC_GetITStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[3ea]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[4cd]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[4ce]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[899]"></a>I2S_Init</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[89a]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[89b]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[89c]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[89d]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[89e]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[89f]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a0]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[4d2]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[4d0]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[8a1]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a2]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a3]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a4]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a5]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[8a6]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a7]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8a8]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>SYSCFG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8a9]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f2xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILineX_Config
</UL>

<P><STRONG><a name="[4b8]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[8aa]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[8ab]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>TIM_DeInit</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
</UL>

<P><STRONG><a name="[462]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
</UL>

<P><STRONG><a name="[8ac]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ad]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ae]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
</UL>

<P><STRONG><a name="[8af]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b0]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b1]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b2]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b3]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
</UL>

<P><STRONG><a name="[8b4]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b5]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server_testing
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_server
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[8b6]"></a>TIM_OC1Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b7]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>TIM_OC3Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
</UL>

<P><STRONG><a name="[467]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
</UL>

<P><STRONG><a name="[8b8]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b9]"></a>TIM_SelectOCxM</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ba]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bb]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bc]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bd]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8be]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bf]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c0]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c1]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c3]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
</UL>

<P><STRONG><a name="[468]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_init
</UL>

<P><STRONG><a name="[8c4]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c5]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c6]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c7]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c8]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c9]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ca]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cb]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cc]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cd]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ce]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cf]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d0]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d1]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d2]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d3]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d4]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4ef]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4ed]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4eb]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4e7]"></a>TIM_ICInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[8d5]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>TIM_PWMIConfig</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[8d6]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d7]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d8]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d9]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8da]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8db]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8dc]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8dd]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8de]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2_init
</UL>

<P><STRONG><a name="[8df]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e0]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e1]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[461]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[8e2]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e3]"></a>TIM_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e4]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e5]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[4f1]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[4f3]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[4f5]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[4f4]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[4f6]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[8e6]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e7]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e8]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e9]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ea]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8eb]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>USART_DeInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3ee]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[8ec]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ed]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ee]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[8ef]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f0]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f1]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f3]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f4]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f5]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f6]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f7]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f8]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f9]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fa]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fb]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fc]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fd]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fe]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ff]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[900]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[901]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[902]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3f3]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f8]"></a>cpu_usage_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cpuusage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[2d9]"></a>cpu_usage_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuusage.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[4fa]"></a>rym_write_to_file</STRONG> (Thumb, 222 bytes, Stack size 168 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rym_write_to_file &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ry
</UL>

<P><STRONG><a name="[183]"></a>ry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = ry &rArr; rym_write_to_file &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(FSymTab)
</UL>
<P><STRONG><a name="[184]"></a>rf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rf &rArr; rym_write_to_file &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(FSymTab)
</UL>
<P><STRONG><a name="[185]"></a>script_exec</STRONG> (Thumb, 118 bytes, Stack size 424 bytes, init_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = script_exec &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rc.o(FSymTab)
</UL>
<P><STRONG><a name="[186]"></a>do_modules</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, init_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = do_modules &rArr; rt_module_open &rArr; rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rc.o(FSymTab)
</UL>
<P><STRONG><a name="[187]"></a>do_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = do_init &rArr; script_exec &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rc.o(FSymTab)
</UL>
<P><STRONG><a name="[189]"></a>module_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = module_test &rArr; script_exec &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rc.o(FSymTab)
</UL>
<P><STRONG><a name="[903]"></a>cJSON_GetErrorPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[904]"></a>cJSON_InitHooks</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>cJSON_Delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[51e]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[51f]"></a>cJSON_Parse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>

<P><STRONG><a name="[523]"></a>cJSON_Print</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cJSON_Print &rArr; print_value &rArr; print_number &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>

<P><STRONG><a name="[524]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[905]"></a>cJSON_GetArraySize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[906]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_GetObjectItem &rArr; cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>

<P><STRONG><a name="[528]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[52a]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_AddItemToObject &rArr; cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
</UL>

<P><STRONG><a name="[52b]"></a>cJSON_AddItemReferenceToArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[52c]"></a>cJSON_AddItemReferenceToObject</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[52e]"></a>cJSON_DetachItemFromArray</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
</UL>

<P><STRONG><a name="[52d]"></a>cJSON_DeleteItemFromArray</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[52f]"></a>cJSON_DetachItemFromObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
</UL>

<P><STRONG><a name="[530]"></a>cJSON_DeleteItemFromObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[531]"></a>cJSON_ReplaceItemInArray</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
</UL>

<P><STRONG><a name="[532]"></a>cJSON_ReplaceItemInObject</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[533]"></a>cJSON_CreateNull</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[534]"></a>cJSON_CreateTrue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[535]"></a>cJSON_CreateFalse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[536]"></a>cJSON_CreateBool</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[537]"></a>cJSON_CreateNumber</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[538]"></a>cJSON_CreateString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
</UL>

<P><STRONG><a name="[539]"></a>cJSON_CreateArray</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[53a]"></a>cJSON_CreateObject</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
</UL>

<P><STRONG><a name="[53b]"></a>cJSON_CreateIntArray</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[53c]"></a>cJSON_CreateFloatArray</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[53e]"></a>cJSON_CreateDoubleArray</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[53f]"></a>cJSON_CreateStringArray</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[540]"></a>cJSON_Duplicate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
</UL>

<P><STRONG><a name="[907]"></a>cJSON_Minify</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>json_cfg_open</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>

<P><STRONG><a name="[542]"></a>json_cfg_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = json_cfg_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>

<P><STRONG><a name="[2b7]"></a>json_cfg_create_PRO_UITD</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_PRO_UITD &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
</UL>

<P><STRONG><a name="[2b8]"></a>json_cfg_create_PRO_CTRL</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_PRO_CTRL &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
</UL>

<P><STRONG><a name="[2b9]"></a>json_cfg_create_AP01</STRONG> (Thumb, 746 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_AP01 &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
</UL>

<P><STRONG><a name="[2bb]"></a>json_cfg_create_eth</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_eth &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[2b6]"></a>json_cfg_create_transparent</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_transparent &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
</UL>

<P><STRONG><a name="[2b5]"></a>json_cfg_create_mode</STRONG> (Thumb, 880 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_mode &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[2bc]"></a>json_cfg_create_WIFI</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_WIFI &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[2ba]"></a>json_cfg_create_FA</STRONG> (Thumb, 1108 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = json_cfg_create_FA &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
</UL>

<P><STRONG><a name="[2b4]"></a>json_cfg_create</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = json_cfg_create &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[3d2]"></a>json_cfg_load_PRO_UITD</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_PRO_UITD &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
</UL>

<P><STRONG><a name="[3d0]"></a>json_cfg_load_PRO_CTRL</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_load_PRO_CTRL &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[392]"></a>json_cfg_load_AP01</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_AP01 &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
</UL>

<P><STRONG><a name="[2e0]"></a>json_cfg_load_eth</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_eth &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>

<P><STRONG><a name="[2e6]"></a>json_cfg_load_mode</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_mode &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_COM_init_thread_entry
</UL>

<P><STRONG><a name="[2d6]"></a>json_cfg_load_WIFI</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_WIFI &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[3a7]"></a>json_cfg_load_FA</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = json_cfg_load_FA &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
</UL>

<P><STRONG><a name="[3c7]"></a>json_cfg_load_transparent</STRONG> (Thumb, 640 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = json_cfg_load_transparent &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
</UL>

<P><STRONG><a name="[2d2]"></a>json_cfg_load</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_load &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[544]"></a>json_cfg_write</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sys_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sys_cfg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_svr_use_name_2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_svr_use_name
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_log_file_path
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_log_file_en
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_num
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_debug_level
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sensor_period_2
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_sensor_period_1
</UL>

<P><STRONG><a name="[545]"></a>json_cfg_write_mult_ext</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_mode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_IP
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DNS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DHCP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_transparent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_WIFI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_AP01
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_input
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_output
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_output
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port_2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port
</UL>

<P><STRONG><a name="[2d3]"></a>json_cfg_wr_sys_cfg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_sys_cfg &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[18a]"></a>json_cfg_wr_sensor_period_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_sensor_period_1 &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[18b]"></a>json_cfg_wr_sensor_period_2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_sensor_period_2 &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[18c]"></a>json_cfg_wr_debug_level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_debug_level &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[18d]"></a>json_cfg_wr_server_num</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_server_num &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[18e]"></a>json_cfg_wr_log_file_en</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_log_file_en &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[18f]"></a>json_cfg_wr_log_file_path</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_wr_log_file_path &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[190]"></a>json_cfg_wr_sys_mode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_sys_mode &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[191]"></a>json_cfg_wr_svr_use_name</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_svr_use_name &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[193]"></a>json_cfg_wr_server_port</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_server_port &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[194]"></a>json_cfg_wr_server_ip_port</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_server_ip_port &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[192]"></a>json_cfg_wr_svr_use_name_2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_wr_svr_use_name_2 &rArr; json_cfg_write &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[195]"></a>json_cfg_wr_server_port_2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_server_port_2 &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[196]"></a>json_cfg_wr_server_ip_port_2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_server_ip_port_2 &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[1a0]"></a>json_cfg_wr_PRO_UITD_output</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = json_cfg_wr_PRO_UITD_output &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19e]"></a>json_cfg_wr_PRO_CTRL_output</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = json_cfg_wr_PRO_CTRL_output &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[1a1]"></a>json_cfg_wr_PRO_UITD_input</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_PRO_UITD_input &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[1a2]"></a>json_cfg_wr_FA_uart</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = json_cfg_wr_FA_uart &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[1a3]"></a>json_cfg_wr_FA_input</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_FA_input &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19f]"></a>json_cfg_wr_PRO_CTRL_input</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_PRO_CTRL_input &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[197]"></a>json_cfg_wr_AP01</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_AP01 &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[198]"></a>json_cfg_wr_WIFI</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_WIFI &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19d]"></a>json_cfg_wr_transparent</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = json_cfg_wr_transparent &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[199]"></a>json_cfg_wr_eth_DHCP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_eth_DHCP &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19a]"></a>json_cfg_wr_eth_DNS</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_wr_eth_DNS &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19b]"></a>json_cfg_wr_eth_IP</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_wr_eth_IP &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[19c]"></a>json_cfg_wr_mode</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = json_cfg_wr_mode &rArr; json_cfg_write_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[546]"></a>json_cfg_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_svr_use_name
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sys_mode
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_debug_level
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sensor_period_2
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sensor_period_1
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sys_cfg
</UL>

<P><STRONG><a name="[547]"></a>json_cfg_read_mult_ext</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP02
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP01
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_ip_port
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_port
</UL>

<P><STRONG><a name="[548]"></a>json_cfg_rd_sys_cfg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>

<P><STRONG><a name="[549]"></a>json_cfg_rd_sensor_period_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_rd_sensor_period_1 &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sensor_period_1
</UL>

<P><STRONG><a name="[1a4]"></a>json_cfg_print_sensor_period_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_print_sensor_period_1 &rArr; json_cfg_rd_sensor_period_1 &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sensor_period_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[54a]"></a>json_cfg_rd_sensor_period_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_rd_sensor_period_2 &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sensor_period_2
</UL>

<P><STRONG><a name="[1a5]"></a>json_cfg_print_sensor_period_2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_print_sensor_period_2 &rArr; json_cfg_rd_sensor_period_2 &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sensor_period_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[54b]"></a>json_cfg_rd_debug_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_rd_debug_level &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_debug_level
</UL>

<P><STRONG><a name="[1a6]"></a>json_cfg_print_debug_level</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_print_debug_level &rArr; json_cfg_rd_debug_level &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_debug_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[54c]"></a>json_cfg_rd_sys_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_rd_sys_mode &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sys_mode
</UL>

<P><STRONG><a name="[1a7]"></a>json_cfg_print_sys_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_print_sys_mode &rArr; json_cfg_rd_sys_mode &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_sys_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[54d]"></a>json_cfg_rd_svr_use_name</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = json_cfg_rd_svr_use_name &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_svr_use_name
</UL>

<P><STRONG><a name="[1a8]"></a>json_cfg_print_svr_use_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = json_cfg_print_svr_use_name &rArr; json_cfg_rd_svr_use_name &rArr; json_cfg_read &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_svr_use_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[54e]"></a>json_cfg_rd_server_port</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_rd_server_port &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_server_port
</UL>

<P><STRONG><a name="[54f]"></a>json_cfg_rd_server_ip_port</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = json_cfg_rd_server_ip_port &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_server_ip_port
</UL>

<P><STRONG><a name="[1a9]"></a>json_cfg_print_server_port</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = json_cfg_print_server_port &rArr; json_cfg_rd_server_port &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_port
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[1aa]"></a>json_cfg_print_server_ip_port</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = json_cfg_print_server_ip_port &rArr; json_cfg_rd_server_ip_port &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_ip_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[550]"></a>json_cfg_rd_AP01</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = json_cfg_rd_AP01 &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_AP01
</UL>

<P><STRONG><a name="[551]"></a>json_cfg_rd_AP02</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, json_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[1ab]"></a>json_cfg_print_AP01</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, json_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = json_cfg_print_AP01 &rArr; json_cfg_rd_AP01 &rArr; json_cfg_read_mult_ext &rArr; json_cfg_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP01
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_config.o(FSymTab)
</UL>
<P><STRONG><a name="[908]"></a>Crc8CCITT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sw_crc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>Crc16</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, sw_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Array
</UL>

<P><STRONG><a name="[552]"></a>Crc16Array</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sw_crc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
</UL>

<P><STRONG><a name="[909]"></a>Crc16Array3</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, sw_crc.o(.text), UNUSED)

<P><STRONG><a name="[90a]"></a>Crc32</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, sw_crc.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>sensor_ADC_DSP</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sensor_ADC_DSP
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
</UL>

<P><STRONG><a name="[554]"></a>sensor_sample_send_data_mq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sensor_sample_send_data_mq &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_analog_in.o(.text)
</UL>
<P><STRONG><a name="[555]"></a>sensor_sample_cfg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sensor_sample_cfg &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
</UL>

<P><STRONG><a name="[393]"></a>sensor_sample_init</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sensor_sample_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[398]"></a>sensor_sample_handler_testing</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sensor_sample_handler_testing &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ADC_DSP
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[395]"></a>sensor_sample_handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sensor_sample_handler &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ADC_DSP
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[399]"></a>sensor_sample_server_testing</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_sample_server_testing &rArr; tim4_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[396]"></a>sensor_sample_server</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, iot_analog_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sensor_sample_server &rArr; tim4_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[83]"></a>IO_input_pin_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iot_digit_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IO_input_pin_read &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pro_uitd.o(.text)
<LI> controller.o(.text)
</UL>
<P><STRONG><a name="[3cf]"></a>IO_input_pin_cfg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iot_digit_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IO_input_pin_cfg &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_IO_input_init
</UL>

<P><STRONG><a name="[3a8]"></a>IO_input_init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, iot_digit_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = IO_input_init &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_pin_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[557]"></a>IO_input_handler</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, iot_digit_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IO_input_handler &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
</UL>

<P><STRONG><a name="[3a9]"></a>IO_input_server</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, iot_digit_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IO_input_server &rArr; IO_input_handler &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[558]"></a>output_ctrl_cfg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = output_ctrl_cfg &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
</UL>

<P><STRONG><a name="[82]"></a>output_write_port</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = output_write_port &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sensor_sample.o(.text)
<LI> controller.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>output_write_pin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = output_write_pin &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sensor_sample.o(.text)
<LI> controller.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>output_ctrl_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = output_ctrl_init &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[559]"></a>output_ctrl_handler</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = output_ctrl_handler &rArr; rt_mq_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_server
</UL>

<P><STRONG><a name="[39a]"></a>output_ctrl_server_testing</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = output_ctrl_server_testing
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[397]"></a>output_ctrl_server</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = output_ctrl_server &rArr; output_ctrl_handler &rArr; rt_mq_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>

<P><STRONG><a name="[1ac]"></a>controller_output</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = controller_output &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_digit_out.o(FSymTab)
</UL>
<P><STRONG><a name="[1ad]"></a>controller_output_delay</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = controller_output_delay &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_digit_out.o(FSymTab)
</UL>
<P><STRONG><a name="[1ae]"></a>controller_toggle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iot_digit_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = controller_toggle &rArr; rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_digit_out.o(FSymTab)
</UL>
<P><STRONG><a name="[31d]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e4]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_tick_get_microsecond
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_tick_get_millisecond
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_timeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(RTMSymTab)
</UL>
<P><STRONG><a name="[55a]"></a>rt_tick_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[3df]"></a>rt_tick_increase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e5]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e8]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_device
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ry
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_file_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e6]"></a>rt_device_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_VK_serial_register
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_file_init
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1e7]"></a>rt_device_unregister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_device_unregister &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_detach
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[90b]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[55e]"></a>rt_device_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_device_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[1e9]"></a>rt_device_open</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_device
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ea]"></a>rt_device_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_close_device
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_close
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_device
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1eb]"></a>rt_device_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_phaser
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_phaser
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_read
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ec]"></a>rt_device_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_server
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server_testing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_socket_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_send
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ESP_07_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_write
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ed]"></a>rt_device_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_config
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_control
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ee]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ef]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_device_set_tx_complete &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(RTMSymTab)
</UL>
<P><STRONG><a name="[4f9]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_init
</UL>

<P><STRONG><a name="[55f]"></a>rt_thread_idle_excute</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_idle_excute &rArr; rt_module_destroy &rArr; rt_mp_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[323]"></a>rt_thread_idle_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f0]"></a>rt_sem_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_sem_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_rx
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_VK32xx
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f1]"></a>rt_sem_detach</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f2]"></a>rt_sem_create</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f3]"></a>rt_sem_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f4]"></a>rt_sem_take</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_rx
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_VK32xx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f5]"></a>rt_sem_trytake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f6]"></a>rt_sem_release</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_rx_ind
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_ack_parser
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_rx_ind
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MG301_rx_ind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ack_parser
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_IRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_rx_ind
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f7]"></a>rt_sem_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_sem_control &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f8]"></a>rt_mutex_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_mutex_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_rec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1f9]"></a>rt_mutex_detach</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_mutex_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1fa]"></a>rt_mutex_create</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1fb]"></a>rt_mutex_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1fc]"></a>rt_mutex_take</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_send
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_send
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_send
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_read_reg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_write_reg
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1fd]"></a>rt_mutex_release</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_send
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_send
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_server
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_send
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_read_reg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_write_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1fe]"></a>rt_mutex_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1ff]"></a>rt_event_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_event_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[200]"></a>rt_event_detach</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_event_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[201]"></a>rt_event_create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[202]"></a>rt_event_delete</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_event_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[203]"></a>rt_event_send</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_event_send &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_rx_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[204]"></a>rt_event_recv</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_event_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[205]"></a>rt_event_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_event_control &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[206]"></a>rt_mb_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_mb_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[207]"></a>rt_mb_detach</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_mb_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[208]"></a>rt_mb_create</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[209]"></a>rt_mb_delete</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20a]"></a>rt_mb_send_wait</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20b]"></a>rt_mb_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_ack_parser
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20c]"></a>rt_mb_recv</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler_testing
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_handler
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20d]"></a>rt_mb_control</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_mb_control &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20e]"></a>rt_mq_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_mq_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[20f]"></a>rt_mq_detach</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_mq_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[211]"></a>rt_mq_delete</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[210]"></a>rt_mq_create</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[212]"></a>rt_mq_send</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_mq_send &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_reset_2
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_reset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_fault_2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_fault
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_fire_2
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FA_mq_fire
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_server
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_toggle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_output_delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_output
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_handler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_send_data_mq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[213]"></a>rt_mq_urgent</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_mq_urgent &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[214]"></a>rt_mq_recv</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_mq_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[215]"></a>rt_mq_control</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_mq_control &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[216]"></a>rt_interrupt_enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq.o(RTMSymTab)
</UL>
<P><STRONG><a name="[217]"></a>rt_interrupt_leave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq.o(RTMSymTab)
</UL>
<P><STRONG><a name="[218]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21b]"></a>rt_get_errno</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_get_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21c]"></a>rt_set_errno</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_read
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21d]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21e]"></a>rt_memset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_struct_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_create_dev_type
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkt_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_create
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_IO_input_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_main_entry
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_file_init
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21f]"></a>rt_memcpy</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_upload_rough_data
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_config_load
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_mult_ack
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_report
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_check_ack
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_report
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_fill_ctrl
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_clean_repeat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_store_data
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_create
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPMUX
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_RST
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWMODE
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_AT
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_create
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGATT
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CSQ
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CGSN
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_CPIN
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SWSPATH
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATI
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ATE
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_AT
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_pin_cfg
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_control
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_cfg
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_cfg
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[220]"></a>rt_memmove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_register_session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[221]"></a>rt_memcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[227]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_module_name
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[222]"></a>rt_strstr</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_strstr &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[223]"></a>rt_strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strcasecmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[224]"></a>rt_strncpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_module_name
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[225]"></a>rt_strncmp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[226]"></a>rt_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlsym
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_symbol_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[228]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_file_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[231]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22a]"></a>rt_vsnprintf</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[188]"></a>rt_kprintf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_server_info
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_XFZD_connected
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_report_IP
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_received
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnected
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_SZJS_connected
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server_info
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_fail
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_success
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_XFZD_connected
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_report_IP
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_received
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnected
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_SZJS_connected
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_eth
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_WIFI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_APP_init_thread_entry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_received
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_controller_list
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_alarm_data_element_parse
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_AP01
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_fail
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_fail
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_success
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_send_fail_somke_alarm
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_ack_deal_somke_alarm
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_print_hex_dump
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_length
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_level_amend
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_flash
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_caller_adr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_print_hex_dump
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_rec_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_display
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_UITD
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_PRO_CTRL
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_transparent
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_server_info
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_XFZD_connected
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_report_IP
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_received
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnected
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_SZJS_connected
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_device
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_AP01
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_server_ip_port
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_server_port
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_svr_use_name
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sys_mode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_debug_level
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sensor_period_2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_sensor_period_1
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_svr_use_name_2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_svr_use_name
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ry
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_symbol
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_arm_relocate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_module
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_register_session
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Address Reference Count : 2]<UL><LI> kservice.o(RTMSymTab)
<LI> init_rc.o(FSymTab)
</UL>
<P><STRONG><a name="[229]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22b]"></a>rt_snprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22c]"></a>rt_vsprintf</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22d]"></a>rt_sprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22e]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[22f]"></a>rt_console_close_device</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_console_close_device &rArr; rt_device_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[230]"></a>rt_console_set_device</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_console_set_device &rArr; rt_device_open &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[232]"></a>rt_malloc_align</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_malloc_align &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[233]"></a>rt_free_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_free_align &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[57e]"></a>__rt_ffs</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[90c]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>rt_assert_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_self
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlsym
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_control
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_VK_serial_register
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_control
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_tof
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_get
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_init_object_container
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_tx_complete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_rx_indicate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_close
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_portal_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_writer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlclose
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_device
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_session
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_session_set_level
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_session_find
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_session
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_lvl
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_lookup_session
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(RTMSymTab)
</UL>
<P><STRONG><a name="[90d]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[90e]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>rt_system_heap_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2]"></a>rt_malloc</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_create
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP02
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP01
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_ip_port
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_port
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_mode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_IP
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DNS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DHCP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_transparent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_WIFI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_AP01
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_input
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_output
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_output
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port_2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_module_name
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cjson.o(.text)
<LI> cjson.o(.data)
<LI> mem.o(RTMSymTab)
</UL>
<P><STRONG><a name="[3]"></a>rt_free</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_destroy
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_destroy
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_srv_destroy
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_destroy
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP02
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP01
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_ip_port
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_port
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_mode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_IP
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DNS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DHCP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_transparent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_WIFI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_AP01
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_input
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_output
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_output
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port_2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_destroy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_destroy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_create
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 4]<UL><LI> cjson.o(.text)
<LI> cjson.o(.data)
<LI> mem.o(RTMSymTab)
<LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[235]"></a>rt_realloc</STRONG> (Thumb, 664 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(RTMSymTab)
</UL>
<P><STRONG><a name="[236]"></a>rt_calloc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(RTMSymTab)
</UL>
<P><STRONG><a name="[90f]"></a>rt_memory_info</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>list_mem</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[910]"></a>rt_mp_alloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mempool.o(.text), UNUSED)

<P><STRONG><a name="[911]"></a>rt_mp_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mempool.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>rt_mp_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_mp_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[238]"></a>rt_mp_detach</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_mp_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[239]"></a>rt_mp_create</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mp_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[23a]"></a>rt_mp_delete</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_mp_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[23b]"></a>rt_mp_alloc</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_mp_alloc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[23c]"></a>rt_mp_free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_mp_free &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2c7]"></a>rt_system_module_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[1b0]"></a>list_symbol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_symbol &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(FSymTab)
</UL>
<P><STRONG><a name="[23d]"></a>rt_module_self</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_module_self
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(RTMSymTab)
</UL>
<P><STRONG><a name="[572]"></a>rt_module_init_object_container</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_module_init_object_container &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
</UL>

<P><STRONG><a name="[912]"></a>rt_module_load_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(.text), UNUSED)

<P><STRONG><a name="[913]"></a>rt_module_unload_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>rt_module_do_main</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_init_object_container
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_load
</UL>

<P><STRONG><a name="[577]"></a>rt_module_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
</UL>

<P><STRONG><a name="[1b1]"></a>rt_module_open</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_module_open &rArr; rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_load
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_module_name
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(FSymTab)
</UL>
<P><STRONG><a name="[579]"></a>rt_module_exec_cmd</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_module_name
</UL>

<P><STRONG><a name="[563]"></a>rt_module_destroy</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_module_destroy &rArr; rt_mp_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[56d]"></a>rt_module_unload</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = rt_module_unload &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlclose
</UL>

<P><STRONG><a name="[23e]"></a>rt_module_find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_module_find &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(RTMSymTab)
</UL>
<P><STRONG><a name="[914]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[915]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[916]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[917]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[918]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[23f]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> object.o(RTMSymTab)
</UL>
<P><STRONG><a name="[55c]"></a>rt_object_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_init &rArr; rt_module_self
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_self
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
</UL>

<P><STRONG><a name="[55d]"></a>rt_object_detach</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_object_detach &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[568]"></a>rt_object_allocate</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_self
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[562]"></a>rt_object_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[561]"></a>rt_object_is_systemobject</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rt_object_is_systemobject &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
</UL>

<P><STRONG><a name="[57c]"></a>rt_object_find</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[919]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>rt_system_scheduler_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[324]"></a>rt_system_scheduler_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[569]"></a>rt_schedule</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_writer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[582]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[583]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_schedule_remove_thread &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[240]"></a>rt_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(RTMSymTab)
</UL>
<P><STRONG><a name="[241]"></a>rt_exit_critical</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(RTMSymTab)
</UL>
<P><STRONG><a name="[242]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(RTMSymTab)
</UL>
<P><STRONG><a name="[584]"></a>rt_thread_exit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>rt_thread_timeout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_timeout &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 2]<UL><LI> thread.o(.text)
<LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[243]"></a>rt_thread_init</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[244]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_self
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[24d]"></a>rt_thread_resume</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_writer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[245]"></a>rt_thread_startup</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_APP_init_thread_entry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_COM_init_thread_entry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_BLE_init
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[246]"></a>rt_thread_detach</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = rt_thread_detach &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[247]"></a>rt_thread_create</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_APP_init_thread_entry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_COM_init_thread_entry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_BLE_init
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[248]"></a>rt_thread_delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = rt_thread_delete &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[249]"></a>rt_thread_yield</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[24c]"></a>rt_thread_suspend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_suspend &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[589]"></a>rt_thread_sleep</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[24a]"></a>rt_thread_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent_rx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sys_status
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm_rx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx_2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_rx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_rec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI_rec
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_GPRS_rec
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rec
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_rx
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_APP_init_thread_entry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_COM_init_thread_entry
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_GPRS_ETH_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_eth_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_GPRS_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_UITD_BLE_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_send
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_server
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server_testing
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_socket_send
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ESP_07_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_handler
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_rec_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[24b]"></a>rt_thread_control</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[24f]"></a>rt_thread_find</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(RTMSymTab)
</UL>
<P><STRONG><a name="[91a]"></a>rt_timer_timeout_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, src_timer.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_timer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[251]"></a>rt_timer_detach</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = rt_timer_detach &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[252]"></a>rt_timer_create</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[253]"></a>rt_timer_delete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_timer_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[254]"></a>rt_timer_start</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[255]"></a>rt_timer_stop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[256]"></a>rt_timer_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src_timer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[55b]"></a>rt_timer_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[58f]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, src_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[31f]"></a>rt_system_timer_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[322]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[588]"></a>rt_hw_stack_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[91b]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[594]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_hw_hard_fault_exception &rArr; hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[595]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[219]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_register_session
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq.o(RTMSymTab)
</UL>
<P><STRONG><a name="[21a]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_destroy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_register_session
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq.o(RTMSymTab)
</UL>
<P><STRONG><a name="[581]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[580]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57f]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[91c]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c8]"></a>dfs_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dfs_init &rArr; rt_mutex_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[596]"></a>dfs_lock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[597]"></a>dfs_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[598]"></a>fd_new</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fd_new &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[599]"></a>fd_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_control
</UL>

<P><STRONG><a name="[59a]"></a>fd_put</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[258]"></a>dfs_normalize_path</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(RTMSymTab)
</UL>
<P><STRONG><a name="[59b]"></a>fd_is_open</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[257]"></a>dfs_subdir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_subdir
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(RTMSymTab)
</UL>
<P><STRONG><a name="[328]"></a>dfs_file_open</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[32b]"></a>dfs_file_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[5a9]"></a>dfs_file_ioctl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dfs_file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>

<P><STRONG><a name="[32a]"></a>dfs_file_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[358]"></a>dfs_file_getdents</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[59d]"></a>dfs_file_unlink</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[5a0]"></a>dfs_file_write</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[5a8]"></a>dfs_file_flush</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_control
</UL>

<P><STRONG><a name="[329]"></a>dfs_file_lseek</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_bin
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
</UL>

<P><STRONG><a name="[32f]"></a>dfs_file_stat</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_length
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[59e]"></a>dfs_file_rename</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[1b2]"></a>ls</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ls &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1b3]"></a>rm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_cfg
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_clean_up
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_reset
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1b4]"></a>cat</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_status_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1b5]"></a>copy</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[5a4]"></a>dfs_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
</UL>

<P><STRONG><a name="[59c]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[5a5]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[5a6]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[2b2]"></a>dfs_mount</STRONG> (Thumb, 372 bytes, Stack size 88 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[2b1]"></a>dfs_unmount</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>

<P><STRONG><a name="[5a7]"></a>dfs_mkfs</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[32d]"></a>dfs_statfs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[1b6]"></a>mkfs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[1b7]"></a>df</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[259]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_info_ack
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_open
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25a]"></a>close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_info_ack
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_close
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_open
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_close
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25b]"></a>read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_CRC16
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[7d]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = write &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_tof
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdevice_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uitd.o(.text)
<LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25c]"></a>lseek</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lseek &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_data_request_ack
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25d]"></a>rename</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25e]"></a>unlink</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[25f]"></a>stat</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[260]"></a>fstat</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fstat &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_zero_clean_up
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_info_ack
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[261]"></a>fsync</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fsync &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[262]"></a>ioctl</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ioctl &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ioctl
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[263]"></a>statfs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = statfs &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[1b8]"></a>mkdir</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dfs_posix.o(RTMSymTab)
<LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[264]"></a>rmdir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rmdir &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[265]"></a>opendir</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[266]"></a>readdir</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = readdir &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[267]"></a>telldir</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = telldir &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[268]"></a>seekdir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = seekdir &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[269]"></a>rewinddir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rewinddir &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[26a]"></a>closedir</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[26b]"></a>getcwd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = getcwd &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(RTMSymTab)
</UL>
<P><STRONG><a name="[111]"></a>dfs_elm_mount</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>dfs_elm_unmount</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>dfs_elm_mkfs</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dfs_elm_mkfs &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>dfs_elm_statfs</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>dfs_elm_open</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>dfs_elm_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>dfs_elm_ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>dfs_elm_read</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>dfs_elm_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>dfs_elm_lseek</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>dfs_elm_getdents</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>dfs_elm_unlink</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>dfs_elm_rename</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>dfs_elm_stat</STRONG> (Thumb, 240 bytes, Stack size 112 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[2ca]"></a>elm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[5e4]"></a>disk_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[5e3]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5bd]"></a>disk_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5be]"></a>disk_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5bf]"></a>disk_ioctl</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[5e6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5c0]"></a>ff_cre_syncobj</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[5c1]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[5c2]"></a>ff_req_grant</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[5c3]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[5ce]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5c9]"></a>get_fat</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5ca]"></a>put_fat</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[5d2]"></a>gen_numname</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5ab]"></a>f_mount</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[5b2]"></a>f_open</STRONG> (Thumb, 300 bytes, Stack size 608 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5b5]"></a>f_read</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[5b6]"></a>f_write</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[5b7]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[5b4]"></a>f_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[5b3]"></a>f_lseek</STRONG> (Thumb, 800 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5ac]"></a>f_opendir</STRONG> (Thumb, 106 bytes, Stack size 544 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[5b9]"></a>f_readdir</STRONG> (Thumb, 108 bytes, Stack size 544 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[5b8]"></a>f_seekdir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[5bc]"></a>f_stat</STRONG> (Thumb, 74 bytes, Stack size 584 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[5af]"></a>f_getfree</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[5e8]"></a>f_truncate</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[5ba]"></a>f_unlink</STRONG> (Thumb, 178 bytes, Stack size 616 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[5b1]"></a>f_mkdir</STRONG> (Thumb, 336 bytes, Stack size 600 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5e9]"></a>f_chmod</STRONG> (Thumb, 96 bytes, Stack size 592 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[5ea]"></a>f_utime</STRONG> (Thumb, 84 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[5bb]"></a>f_rename</STRONG> (Thumb, 276 bytes, Stack size 648 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[5ae]"></a>f_mkfs</STRONG> (Thumb, 1098 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_mkfs &rArr; disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[5b0]"></a>elm_get_vol</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5dd]"></a>ff_convert</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5d1]"></a>ff_wtoupper</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[120]"></a>dfs_romfs_mount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>dfs_romfs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>dfs_romfs_ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[5eb]"></a>dfs_romfs_lookup</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_stat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
</UL>

<P><STRONG><a name="[125]"></a>dfs_romfs_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dfs_romfs_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>dfs_romfs_lseek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>dfs_romfs_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>dfs_romfs_open</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfs_romfs_open &rArr; dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>dfs_romfs_stat</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfs_romfs_stat &rArr; dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>dfs_romfs_getdents</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dfs_romfs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[2cb]"></a>dfs_romfs_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_romfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dfs_romfs_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[5ed]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[4a4]"></a>rt_i2c_bus_device_find</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_i2c_bus_device_find &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
</UL>

<P><STRONG><a name="[49a]"></a>rt_i2c_transfer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegisterValue
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegisterValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>

<P><STRONG><a name="[5ef]"></a>rt_i2c_master_send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[5f0]"></a>rt_i2c_master_recv</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[2c9]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[5ee]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[4d5]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[4cb]"></a>rt_device_pin_register</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pin_init
</UL>

<P><STRONG><a name="[1b9]"></a>rt_pin_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1ba]"></a>rt_pin_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ext_board_module_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_IO_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_write_port
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_write_pin
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ctrl_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ESP_07_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gpio_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23X17_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1bb]"></a>rt_pin_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_pin_read
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_server_testing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[3f8]"></a>rt_hw_serial_register</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[3f2]"></a>rt_hw_serial_isr</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4d4]"></a>rt_spi_bus_register</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>

<P><STRONG><a name="[414]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[45e]"></a>rt_spi_configure</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[45d]"></a>rt_spi_send_then_send</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
</UL>

<P><STRONG><a name="[458]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_status
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[45f]"></a>rt_spi_transfer</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_read_reg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_write_reg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[601]"></a>rt_spi_transfer_message</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[602]"></a>rt_spi_take_bus</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[603]"></a>rt_spi_release_bus</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[604]"></a>rt_spi_take</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[605]"></a>rt_spi_release</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[5ff]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[600]"></a>rt_spidev_device_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[26c]"></a>rt_completion_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> completion.o(RTMSymTab)
</UL>
<P><STRONG><a name="[26d]"></a>rt_completion_wait</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> completion.o(RTMSymTab)
</UL>
<P><STRONG><a name="[26e]"></a>rt_completion_done</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> completion.o(RTMSymTab)
</UL>
<P><STRONG><a name="[26f]"></a>rt_data_queue_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataqueue.o(RTMSymTab)
</UL>
<P><STRONG><a name="[270]"></a>rt_data_queue_push</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataqueue.o(RTMSymTab)
</UL>
<P><STRONG><a name="[271]"></a>rt_data_queue_pop</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataqueue.o(RTMSymTab)
</UL>
<P><STRONG><a name="[272]"></a>rt_data_queue_peak</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataqueue.o(RTMSymTab)
</UL>
<P><STRONG><a name="[273]"></a>rt_data_queue_reset</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_data_queue_reset &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataqueue.o(RTMSymTab)
</UL>
<P><STRONG><a name="[274]"></a>rt_pipe_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_pipe_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(RTMSymTab)
</UL>
<P><STRONG><a name="[275]"></a>rt_pipe_detach</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_pipe_detach &rArr; rt_device_unregister &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(RTMSymTab)
</UL>
<P><STRONG><a name="[276]"></a>rt_pipe_create</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_pipe_create &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(RTMSymTab)
</UL>
<P><STRONG><a name="[277]"></a>rt_pipe_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_pipe_destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(RTMSymTab)
</UL>
<P><STRONG><a name="[278]"></a>rt_portal_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_portal_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(RTMSymTab)
</UL>
<P><STRONG><a name="[279]"></a>rt_portal_detach</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_portal_detach &rArr; rt_device_unregister &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27a]"></a>rt_portal_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_portal_create &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27b]"></a>rt_portal_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_portal_destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_portal_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27c]"></a>rt_ringbuffer_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27d]"></a>rt_ringbuffer_put</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_put &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_received
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_received
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_received
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_received
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27e]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_ringbuffer_put_force &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[27f]"></a>rt_ringbuffer_get</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[280]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_putchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[281]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_putchar_force &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[282]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ringbuffer.o(RTMSymTab)
</UL>
<P><STRONG><a name="[610]"></a>finsh_set_device</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[611]"></a>finsh_get_device</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[612]"></a>finsh_set_echo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[613]"></a>finsh_get_echo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[616]"></a>finsh_run_line</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[61a]"></a>finsh_thread_entry</STRONG> (Thumb, 1098 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[61b]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[61c]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2c5]"></a>finsh_system_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = finsh_system_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[1bc]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bd]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1be]"></a>list_thread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_thread &rArr; _list_thread &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bf]"></a>list_sem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c0]"></a>list_event</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c1]"></a>list_mutex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c2]"></a>list_mailbox</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c3]"></a>list_msgqueue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c4]"></a>list_mempool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c5]"></a>list_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c6]"></a>list_device</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c7]"></a>list_module</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_module &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c8]"></a>list_mod_detail</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_mod_detail &rArr; _list_device &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c9]"></a>list</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[615]"></a>list_prefix</STRONG> (Thumb, 816 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[501]"></a>finsh_compiler_run</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = finsh_compiler_run &rArr; finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[639]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
</UL>

<P><STRONG><a name="[62c]"></a>finsh_error_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[4ff]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[500]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[62e]"></a>finsh_heap_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_heap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
</UL>

<P><STRONG><a name="[62f]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[634]"></a>finsh_heap_allocate</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[4fd]"></a>finsh_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_init &rArr; finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[617]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[503]"></a>finsh_flush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_flush &rArr; finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[63a]"></a>finsh_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>

<P><STRONG><a name="[637]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
</UL>

<P><STRONG><a name="[63d]"></a>finsh_node_allocate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[63b]"></a>finsh_node_new_id</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = finsh_node_new_id &rArr; finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[640]"></a>finsh_node_new_char</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[641]"></a>finsh_node_new_int</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[642]"></a>finsh_node_new_long</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[643]"></a>finsh_node_new_string</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[645]"></a>finsh_node_new_ptr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[12a]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>OP_add_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>OP_add_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>OP_add_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>OP_sub_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>OP_sub_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>OP_sub_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>OP_div_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>OP_div_word</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>OP_div_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>OP_mod_byte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>OP_mod_word</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>OP_mod_dword</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_dword
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>OP_mul_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>OP_mul_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>OP_mul_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>OP_and_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>OP_and_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>OP_and_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>OP_or_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>OP_or_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>OP_or_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>OP_xor_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>OP_xor_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>OP_xor_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>OP_bw_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>OP_bw_word</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>OP_bw_dword</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>OP_shl_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>OP_shl_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>OP_shl_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>OP_shr_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>OP_shr_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>OP_shr_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>OP_ld_byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>OP_ld_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>OP_ld_dword</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>OP_ld_value_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>OP_ld_value_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>OP_ld_value_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>OP_st_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>OP_st_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>OP_st_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>OP_pop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>OP_call</STRONG> (Thumb, 524 bytes, Stack size 128 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[4fe]"></a>finsh_parser_run</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[636]"></a>finsh_parser_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[638]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
</UL>

<P><STRONG><a name="[658]"></a>finsh_var_insert</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[65b]"></a>finsh_var_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[63c]"></a>finsh_var_lookup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[65c]"></a>finsh_sysvar_append</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[63e]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[502]"></a>finsh_vm_run</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[65d]"></a>finsh_syscall_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_vm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[63f]"></a>finsh_syscall_lookup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[65a]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_token_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[666]"></a>token_get_string</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_get_string &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[649]"></a>finsh_token_token</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[669]"></a>finsh_token_get_token</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_token.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[283]"></a>dlclose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dlclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dlclose &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_unload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlclose.o(RTMSymTab)
</UL>
<P><STRONG><a name="[284]"></a>dlerror</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dlerror.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dlerror.o(RTMSymTab)
</UL>
<P><STRONG><a name="[285]"></a>dlopen</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dlopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dlopen &rArr; rt_module_open &rArr; rt_module_load &rArr; rt_module_do_main &rArr; _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlopen.o(RTMSymTab)
</UL>
<P><STRONG><a name="[286]"></a>dlsym</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dlsym.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dlsym &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlsym.o(RTMSymTab)
</UL>
<P><STRONG><a name="[66a]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[672]"></a>netconn_delete</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[674]"></a>netconn_getaddr</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[675]"></a>netconn_bind</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[676]"></a>netconn_connect</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[677]"></a>netconn_disconnect</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[678]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[679]"></a>netconn_accept</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[67c]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[67d]"></a>netconn_recv</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[67e]"></a>netconn_recved</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[67f]"></a>netconn_send</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
</UL>

<P><STRONG><a name="[680]"></a>netconn_sendto</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[681]"></a>netconn_write_partly</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[684]"></a>netconn_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[685]"></a>netconn_shutdown</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[686]"></a>netconn_gethostbyname</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
</UL>

<P><STRONG><a name="[673]"></a>netconn_free</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[66b]"></a>netconn_alloc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[ca]"></a>do_newconn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>do_delconn</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>do_bind</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>do_connect</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>do_disconnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>do_listen</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>do_send</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>do_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>do_write</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>do_getaddr</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = do_getaddr &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>do_close</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>do_gethostbyname</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6b8]"></a>netbuf_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[68d]"></a>netbuf_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[6b9]"></a>netbuf_alloc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[6ba]"></a>netbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6bb]"></a>netbuf_ref</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6bc]"></a>netbuf_chain</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[6be]"></a>netbuf_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[6bf]"></a>netbuf_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[6c0]"></a>netbuf_first</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[2a1]"></a>lwip_gethostbyname</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2a2]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwip_gethostbyname_r &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2a3]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_freeaddrinfo &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2a4]"></a>lwip_getaddrinfo</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[6c1]"></a>do_netifapi_netif_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = do_netifapi_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[6c3]"></a>do_netifapi_netif_set_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = do_netifapi_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[6c4]"></a>do_netifapi_netif_common</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_netifapi_netif_common &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[6c5]"></a>netifapi_netif_add</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[2a8]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[6c7]"></a>netifapi_netif_common</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[719]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[287]"></a>lwip_accept</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_accept &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[288]"></a>lwip_bind</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28e]"></a>lwip_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28f]"></a>lwip_connect</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[290]"></a>lwip_listen</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[293]"></a>lwip_recvfrom</STRONG> (Thumb, 580 bytes, Stack size 80 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx_2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[292]"></a>lwip_read</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[291]"></a>lwip_recv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[295]"></a>lwip_sendto</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_send
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[294]"></a>lwip_send</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[296]"></a>lwip_socket</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[297]"></a>lwip_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[298]"></a>lwip_select</STRONG> (Thumb, 832 bytes, Stack size 96 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lwip_select &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[289]"></a>lwip_shutdown</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28a]"></a>lwip_getpeername</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwip_getpeername &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28b]"></a>lwip_getsockname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28c]"></a>lwip_getsockopt</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_getsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[28d]"></a>lwip_setsockopt</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[299]"></a>lwip_ioctl</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_ioctl &rArr; get_socket &rArr; _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[29a]"></a>lwip_fcntl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_fcntl &rArr; get_socket &rArr; _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[e4]"></a>tcpip_input</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcpip_input &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(.text)
<LI> sys_arch.o(.text)
</UL>
<P><STRONG><a name="[688]"></a>tcpip_callback_with_block</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[6d5]"></a>tcpip_timeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[6d6]"></a>tcpip_untimeout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[66c]"></a>tcpip_apimsg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[6c6]"></a>tcpip_netifapi</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>

<P><STRONG><a name="[6d7]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[6d8]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[6d9]"></a>tcpip_trycallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[6da]"></a>tcpip_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[6dd]"></a>pbuf_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[6de]"></a>mem_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[66d]"></a>sys_arch_assert</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[2de]"></a>lwip_system_init</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sys_init
</UL>

<P><STRONG><a name="[717]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6e1]"></a>lwip_sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[687]"></a>sys_sem_new</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[670]"></a>sys_sem_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[68f]"></a>sys_sem_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_common
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
</UL>

<P><STRONG><a name="[689]"></a>sys_arch_sem_wait</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[66e]"></a>sys_sem_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[69d]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[6e2]"></a>sys_mutex_new</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[6e3]"></a>sys_mutex_lock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[6e4]"></a>sys_mutex_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[6e5]"></a>sys_mutex_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>

<P><STRONG><a name="[91d]"></a>sys_mutex_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[91e]"></a>sys_mutex_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[69e]"></a>sys_mbox_new</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[671]"></a>sys_mbox_free</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[6d4]"></a>sys_mbox_post</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[68c]"></a>sys_mbox_trypost</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[67a]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[6a7]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[66f]"></a>sys_mbox_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[69f]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[6dc]"></a>sys_thread_new</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[6e6]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[6e7]"></a>sys_arch_unprotect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[6e8]"></a>sys_jiffies</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[682]"></a>sys_now</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[29b]"></a>lwip_htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_send
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx_2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_eth_rx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[29c]"></a>lwip_ntohs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[29d]"></a>lwip_htonl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[29e]"></a>lwip_ntohl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2a6]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[6fe]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[700]"></a>dhcp_release</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[703]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[706]"></a>dhcp_set_struct</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[707]"></a>dhcp_cleanup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[2a7]"></a>dhcp_stop</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2a5]"></a>dhcp_start</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[709]"></a>dhcp_inform</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[70a]"></a>dhcp_network_changed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[70c]"></a>dhcp_arp_reply</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[705]"></a>dns_setserver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
</UL>

<P><STRONG><a name="[70f]"></a>dns_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dns_init &rArr; udp_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[772]"></a>dns_getserver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[714]"></a>dns_tmr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[6b7]"></a>dns_gethostbyname</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[6db]"></a>lwip_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[718]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2ac]"></a>netif_set_gw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2ad]"></a>netif_set_netmask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2ab]"></a>netif_set_ipaddr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2aa]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[6c2]"></a>netif_add</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
</UL>

<P><STRONG><a name="[6df]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[6f5]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[71e]"></a>netif_remove</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>

<P><STRONG><a name="[2a9]"></a>netif_find</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[6e0]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[f3]"></a>netif_set_link_up</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>netif_set_link_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, netif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[68b]"></a>pbuf_free</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[4c3]"></a>pbuf_alloc</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[6f2]"></a>pbuf_realloc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[723]"></a>pbuf_header</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[74b]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[724]"></a>pbuf_ref</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[6bd]"></a>pbuf_cat</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[725]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[726]"></a>pbuf_dechain</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[68a]"></a>pbuf_copy</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6cb]"></a>pbuf_copy_partial</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[727]"></a>pbuf_take</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[728]"></a>pbuf_coalesce</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[72a]"></a>pbuf_get_at</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[729]"></a>pbuf_memcmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[72b]"></a>pbuf_memfind</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[72c]"></a>pbuf_strstr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[765]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6ab]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[6ae]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[6a2]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[6b3]"></a>raw_sendto</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[6b4]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[6a9]"></a>raw_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = raw_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[6a1]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = raw_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[71b]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[72f]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[721]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[730]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[731]"></a>tcp_slowtmr</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[736]"></a>tcp_pcb_remove</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[69a]"></a>tcp_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[73a]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[68e]"></a>tcp_recved</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[73b]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[73c]"></a>tcp_process_refused_data</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[73d]"></a>tcp_fasttmr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[73e]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[69b]"></a>tcp_shutdown</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[73f]"></a>tcp_abandon</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6a8]"></a>tcp_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6ad]"></a>tcp_bind</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[6b2]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[741]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[742]"></a>tcp_next_iss</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6b0]"></a>tcp_connect</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[91f]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[744]"></a>tcp_seg_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_seg_copy &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[747]"></a>tcp_alloc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6a5]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[694]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[695]"></a>tcp_recv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[697]"></a>tcp_sent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[699]"></a>tcp_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[696]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[698]"></a>tcp_poll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[920]"></a>tcp_debug_state_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[752]"></a>tcp_input</STRONG> (Thumb, 1030 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[743]"></a>tcp_enqueue_flags</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[739]"></a>tcp_send_fin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[691]"></a>tcp_write</STRONG> (Thumb, 1404 bytes, Stack size 96 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[74c]"></a>tcp_send_empty_ack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[692]"></a>tcp_output</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[735]"></a>tcp_rst</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[733]"></a>tcp_rexmit_rto</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[74f]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[74a]"></a>tcp_rexmit_fast</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[734]"></a>tcp_keepalive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[732]"></a>tcp_zero_window_probe</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6d1]"></a>sys_timeout</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[738]"></a>tcp_timer_needed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[71c]"></a>sys_timeouts_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d2]"></a>sys_untimeout</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_untimeout &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6d3]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[71a]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[75b]"></a>udp_input</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6ac]"></a>udp_bind</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[6f3]"></a>udp_sendto_if</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6b5]"></a>udp_sendto</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[6b6]"></a>udp_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[6af]"></a>udp_connect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[6b1]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[6a4]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[6aa]"></a>udp_remove</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[6a3]"></a>udp_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = udp_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[75e]"></a>icmp_input</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[75c]"></a>icmp_dest_unreach</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[762]"></a>inet_chksum_pseudo</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[764]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[761]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[75f]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[72d]"></a>ip_route</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[6d0]"></a>ip_input</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[72e]"></a>ip_output_if</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[758]"></a>ip_output</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[753]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[766]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[29f]"></a>ipaddr_aton</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[710]"></a>ipaddr_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[767]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[2a0]"></a>ipaddr_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(RTMSymTab)
</UL>
<P><STRONG><a name="[75a]"></a>etharp_tmr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[71d]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[76d]"></a>etharp_find_addr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[71f]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[6f7]"></a>etharp_query</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[f0]"></a>etharp_output</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[6cf]"></a>ethernet_input</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[771]"></a>eth_device_init_with_flag</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[4c8]"></a>eth_device_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[4b7]"></a>eth_device_ready</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[4c6]"></a>eth_device_linkchange</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[2dd]"></a>eth_system_device_init</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = eth_system_device_init &rArr; rt_thread_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_thread_start
</UL>

<P><STRONG><a name="[1ca]"></a>set_if</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = set_if &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1cb]"></a>set_dns</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_dns &rArr; ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1cc]"></a>list_if</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_if &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1cd]"></a>list_tcps</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = list_tcps &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[773]"></a>log_trace_file_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = log_trace_file_init &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_file
</UL>

<P><STRONG><a name="[1ce]"></a>log_trace_set_file</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = log_trace_set_file &rArr; log_trace_file_init &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_device
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_file_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_file.o(FSymTab)
</UL>
<P><STRONG><a name="[775]"></a>log_trace_register_session</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, log_trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
</UL>

<P><STRONG><a name="[776]"></a>log_trace_session_find</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, log_trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_lookup_session
</UL>

<P><STRONG><a name="[1cf]"></a>log_trace_set_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_trace.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(FSymTab)
</UL>
<P><STRONG><a name="[777]"></a>log_trace_session_set_level</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, log_trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[77a]"></a>__logtrace_vfmtout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __logtrace_vfmtout &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idname_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_session
</UL>

<P><STRONG><a name="[1d0]"></a>log_trace</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_session
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_server_info
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_XFZD_connected
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_report_IP
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_received
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnected
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_SZJS_connected
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server_info
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_fail
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_success
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_XFZD_connected
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_report_IP
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_received
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnected
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_SZJS_connected
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_received
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_fail
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_fail
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_success
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_send_fail_somke_alarm
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_ack_deal_somke_alarm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_close
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_rec_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_server_info
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_XFZD_connected
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_report_IP
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_received
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnected
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_SZJS_connected
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> log_trace.o(FSymTab)
<LI> log_trace.o(RTMSymTab)
</UL>
<P><STRONG><a name="[77c]"></a>log_session</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, log_trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_lvl
</UL>

<P><STRONG><a name="[1d1]"></a>log_trace_flush</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = log_trace_flush &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_server_info
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_XFZD_connected
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_report_IP
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_received
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnected
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_disconnect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_SZJS_connected
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_connect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_handler
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_server_info
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_fail
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_download_success
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_XFZD_connected
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_report_IP
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_received
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnected
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_disconnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_SZJS_connected
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_transparent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_sensor_sample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_fire_alarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_out
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_ctrl_in
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_WIFI_ESP_07
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth_2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_eth
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_WIFI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_2_WIFI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_UITD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_PRO_CTRL
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_GSM_MG301
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_BLE_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_BLE_received
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_input_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAC_usual_rx_parser
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_testing_parser
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ctrl_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_fail
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_firmware_success
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_fail
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dl_file_success
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_pkg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_200_U_ROUGH_DATA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_4_U_FIRE_SYS_OPERATE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_1_U_FIRE_SYS_STATUS
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_24_U_UITD_OPERATE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_21_U_UITD_STATUS
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_2_U_FIRE_DEV_STATUS
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_trans_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_send_fail_somke_alarm
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_cb_ack_deal_somke_alarm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_close
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_service
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_send_data
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_rec_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_server_rec_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_service
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_report_deal
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_rec_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_server_rec_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_send_data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_rx_parse
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_server_send_pkg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_server_info
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_XFZD_connected
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_report_IP
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_received
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnected
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_disconnect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_WIFI_SZJS_connected
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> log_trace.o(FSymTab)
<LI> log_trace.o(RTMSymTab)
</UL>
<P><STRONG><a name="[2c6]"></a>log_trace_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = log_trace_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[921]"></a>log_trace_get_device</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, log_trace.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>log_trace_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_trace_set_device &rArr; rt_device_open &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_set_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(FSymTab)
</UL>
<P><STRONG><a name="[1d3]"></a>log_trace_list_date</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log_trace_list_date &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_time
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(FSymTab)
</UL>
<P><STRONG><a name="[1d4]"></a>log_trace_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = log_trace_close &rArr; log_trace_list_date &rArr; log_trace &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(FSymTab)
</UL>
<P><STRONG><a name="[781]"></a>CRC16</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[4fb]"></a>rym_recv_on_device</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rym_recv_on_device &rArr; _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>

<P><STRONG><a name="[2c1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[505]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[6ef]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[922]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_set_time
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[2f0]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_list_date
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_BKR_display
</UL>

<P><STRONG><a name="[4c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[527]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[923]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[924]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[925]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_dev_status
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_connect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_service_handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_sensor_upload_rough_data
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_connect
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_listen_listen
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_UITD_BLE_rx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_power_battery_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_mother_board_check
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_comm_rough_data
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_inital_status
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_UITD_reset
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_FA_reset
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_fire_sys_main_power_fault
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IO_state_report
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_transparent_send_data
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_check_ack
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_IOT_GW_info_report
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_length_info
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_info
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_pkt
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_testing_data
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_send_alive_pkt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_set_time
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_socket_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ADC_DSP
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_print_server_port
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[926]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2d8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[1d9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_name
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ext_strstr
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_ack_parser
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_phaser
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ack_parser
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_phaser
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[644]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_get_token
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[517]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[2b3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_WIFI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_fs_check
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlopen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_alarm_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ext_strlen
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_flash
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_socket_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_init
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_modules
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_session
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[332]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_rx_ind
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_enable_login
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
</UL>

<P><STRONG><a name="[32c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat_flash
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2e7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_eth_connect
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_upload_file_info
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_GPRS_connect
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_COM_init_thread_entry
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_update_file
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_name
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_firmware
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_deal
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_file_req_length_info
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP02
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_AP01
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_ip_port
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_rd_server_port
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_mode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_IP
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DNS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_eth_DHCP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_transparent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_WIFI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_AP01
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_input
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_CTRL_output
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_PRO_UITD_output
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port_2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_ip_port
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_server_port
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[51d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[5a3]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[1d8]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[340]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_connect
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_firmware_parse
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_phaser
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_ack_parser
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_phaser
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[78c]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[7a1]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1da]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ext_atoi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[50c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[793]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[50b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write_mult_ext
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[543]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_transparent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_eth
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_UITD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_PRO_CTRL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_FA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create_AP01
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_create
</UL>

<P><STRONG><a name="[50f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read_mult_ext
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_read
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[53d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
</UL>

<P><STRONG><a name="[927]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[511]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[512]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[928]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7af]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[787]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[929]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[786]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[92a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[790]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[92b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_SJ3208_send_pkg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_get_time
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_trans_time
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[788]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[789]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[78d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[794]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[7a0]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[798]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[78b]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[fe]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> sscanf.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> sscanf.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[78f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[92c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[792]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[791]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[797]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7aa]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[92d]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[79e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2af]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[92e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[101]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[79b]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[79d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7a2]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[796]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[79a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[92f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[930]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[931]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[932]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7a3]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[933]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2ee]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_download_file
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_testing_log
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_load_FA
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bus_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UITD_dir_request_ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_socket_send
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CIPCLOSE
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_srv_AT_CIPSTART
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_CWJAP
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_srv_AT_SEND_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_socket_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_cmd_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISW_data
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISC
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO_info
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISO
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_name
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_ip
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_listen
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_IOMODE
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SISS_TYPE
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS_APN
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_srv_AT_SICS
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_cfg_wr_FA_uart
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[934]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1db]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(RTMSymTab)
</UL>
<P><STRONG><a name="[7b2]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[78e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[935]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[7a5]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7a6]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7a7]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7a8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7a9]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7ab]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[936]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[937]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[938]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7b0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[799]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[513]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[aa]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[50e]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[7b1]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[103]"></a>stm32_configure</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = stm32_configure &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>stm32_control</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = stm32_control &rArr; stm32_configure &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>stm32_putc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>stm32_getc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[3f4]"></a>RCC_Configuration</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[3f5]"></a>GPIO_Configuration</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[3f6]"></a>NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_assign
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[85]"></a>rt_rtc_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>rt_rtc_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>rt_rtc_control</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mktime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.text)
</UL>
<P><STRONG><a name="[411]"></a>rt_hw_spi1_init</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_hw_spi1_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[415]"></a>rt_hw_spi2_init</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_hw_spi2_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[455]"></a>flash_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = flash_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_open
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[456]"></a>flash_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = flash_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_open
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[457]"></a>w25qxx_read_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = w25qxx_read_status &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
</UL>

<P><STRONG><a name="[459]"></a>w25qxx_wait_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = w25qxx_wait_busy &rArr; w25qxx_read_status &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_open
</UL>

<P><STRONG><a name="[45a]"></a>w25qxx_read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = w25qxx_read &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_read
</UL>

<P><STRONG><a name="[88]"></a>w25qxx_flash_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_flash_w25qxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>w25qxx_flash_open</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = w25qxx_flash_open &rArr; w25qxx_wait_busy &rArr; w25qxx_read_status &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>w25qxx_flash_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_flash_w25qxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>w25qxx_flash_control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = w25qxx_flash_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>w25qxx_flash_read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = w25qxx_flash_read &rArr; w25qxx_read &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>w25qxx_flash_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = w25qxx_flash_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_status &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_w25qxx.o(.text)
</UL>
<P><STRONG><a name="[45b]"></a>rt_spi_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_flash_w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_spi_send &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_flash_open
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[471]"></a>NVIC_Configuration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PRO_init
</UL>

<P><STRONG><a name="[484]"></a>MSD_take_owner</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MSD_take_owner &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[48c]"></a>MSD_take_cs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSD_take_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[48d]"></a>MSD_release_cs</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSD_release_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[485]"></a>rt_tick_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
</UL>

<P><STRONG><a name="[488]"></a>crc7</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
</UL>

<P><STRONG><a name="[486]"></a>_wait_ready</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _wait_ready &rArr; rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
</UL>

<P><STRONG><a name="[487]"></a>_send_cmd</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _send_cmd &rArr; _wait_ready &rArr; rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[489]"></a>_wait_token</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _wait_token &rArr; rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
</UL>

<P><STRONG><a name="[48a]"></a>_read_block</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _read_block &rArr; _wait_token &rArr; rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_read
</UL>

<P><STRONG><a name="[48b]"></a>_write_block</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _write_block &rArr; _wait_ready &rArr; rt_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_sdhc_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_msd_write
</UL>

<P><STRONG><a name="[8f]"></a>rt_msd_write</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_msd_write &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_release_cs
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_cs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>rt_msd_read</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_msd_read &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_release_cs
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_cs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>rt_msd_sdhc_write</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_msd_sdhc_write &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_release_cs
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_cs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>rt_msd_sdhc_read</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_msd_sdhc_read &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_release_cs
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_cs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>rt_msd_init</STRONG> (Thumb, 1712 bytes, Stack size 168 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_msd_init &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_timeout
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_release_cs
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_cs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>rt_msd_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>rt_msd_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>rt_msd_control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_msd_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msd.o(.text)
</UL>
<P><STRONG><a name="[48f]"></a>EXTILineX_Config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vk3266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXTILineX_Config &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK32xx_HW_init
</UL>

<P><STRONG><a name="[96]"></a>VK_serial_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>VK_serial_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>VK_serial_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>VK_serial_read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>VK_serial_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>VK_serial_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vk3266.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vk3266.o(.text)
</UL>
<P><STRONG><a name="[499]"></a>ReadRegisterValue</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ReadRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_CheckDevicePresent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadIntCapB
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadIntCapA
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadPortA
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_ReadPortB
</UL>

<P><STRONG><a name="[49c]"></a>SetRegisterValue</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mcp23x17.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetRegisterValue &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_CheckDevicePresent
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_SetIOPortB
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_Init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23017_SetIOPortA
</UL>

<P><STRONG><a name="[9c]"></a>rt_stm32_eth_init</STRONG> (Thumb, 178 bytes, Stack size 200 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_stm32_eth_init &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>rt_stm32_eth_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>rt_stm32_eth_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>rt_stm32_eth_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_stm32_eth_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>rt_stm32_eth_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_stm32_eth_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>rt_stm32_eth_control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_stm32_eth_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[4c4]"></a>NVIC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[4c5]"></a>GPIO_Configuration</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[a2]"></a>phy_monitor_thread_entry</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f2xx_eth_lan8720a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phy_monitor_thread_entry &rArr; rt_stm32_eth_init &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_eth_lan8720a.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>configure</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f20x_40x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = configure &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f20x_40x_spi.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>xfer</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f20x_40x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f20x_40x_spi.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>gpio_set_sda</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_i2c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>gpio_set_scl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_i2c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>gpio_get_sda</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_i2c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>gpio_get_scl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_i2c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>gpio_udelay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_udelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[4d6]"></a>SetSysClock</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e1]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[4e0]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
</UL>

<P><STRONG><a name="[4e8]"></a>TI4_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4ee]"></a>TI3_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4ec]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[4ea]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a5]"></a>cpu_usage_idle_hook</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, cpuusage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cpu_usage_idle_hook &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpuusage.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>_rym_bg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _rym_bg &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_rym_tof</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _rym_tof &rArr; write &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>_rym_end</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _rym_end &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[4fc]"></a>read_line</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, init_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = read_line &rArr; read &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;script_exec
</UL>

<P><STRONG><a name="[504]"></a>cJSON_strcasecmp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[506]"></a>cJSON_strdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[507]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNull
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[509]"></a>parse_number</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[510]"></a>print_number</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_number &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[515]"></a>parse_hex4</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[514]"></a>parse_string</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[516]"></a>print_string_ptr</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_string_ptr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
</UL>

<P><STRONG><a name="[518]"></a>print_string</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[51a]"></a>skip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[519]"></a>parse_object</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[51c]"></a>parse_array</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[51b]"></a>parse_value</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[520]"></a>print_object</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[522]"></a>print_array</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[521]"></a>print_value</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = print_value &rArr; print_number &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[529]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[526]"></a>create_reference</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
</UL>

<P><STRONG><a name="[ab]"></a>rt_thread_idle_entry</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_module_destroy &rArr; rt_mp_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[560]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[564]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[566]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[565]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[567]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[56a]"></a>rt_ipc_list_resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
</UL>

<P><STRONG><a name="[56c]"></a>print_number</STRONG> (Thumb, 292 bytes, Stack size 52 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[56b]"></a>skip_atoi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[56e]"></a>plug_holes</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[56f]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_delete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_detach
</UL>

<P><STRONG><a name="[570]"></a>rt_module_symbol_find</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_module_symbol_find
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
</UL>

<P><STRONG><a name="[571]"></a>rt_module_arm_relocate</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_module_arm_relocate &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_relocated_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_shared_object
</UL>

<P><STRONG><a name="[573]"></a>_load_shared_object</STRONG> (Thumb, 1320 bytes, Stack size 56 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _load_shared_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_arm_relocate
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_symbol_find
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
</UL>

<P><STRONG><a name="[574]"></a>_load_relocated_object</STRONG> (Thumb, 994 bytes, Stack size 72 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _load_relocated_object &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_arm_relocate
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_symbol_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_do_main
</UL>

<P><STRONG><a name="[575]"></a>_rt_module_split_arg</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _rt_module_split_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_main_entry
</UL>

<P><STRONG><a name="[ac]"></a>module_main_entry</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = module_main_entry &rArr; _rt_module_split_arg
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_module_split_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(.text)
</UL>
<P><STRONG><a name="[578]"></a>_module_name</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _module_name &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_exec_cmd
</UL>

<P><STRONG><a name="[57a]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[57b]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[57d]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[587]"></a>_rt_thread_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[585]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[586]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[58c]"></a>_rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[58a]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, src_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[58e]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[58b]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[58d]"></a>_rt_timer_remove</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[590]"></a>usage_fault_track</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[591]"></a>bus_fault_track</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[592]"></a>mem_manage_fault_track</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[593]"></a>hard_fault_track</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[59f]"></a>copyfile</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[5a1]"></a>copydir</STRONG> (Thumb, 250 bytes, Stack size 312 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[5a2]"></a>_get_path_lastname</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[5ad]"></a>elm_result_to_dfs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[5aa]"></a>get_disk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[5d3]"></a>mem_cpy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5c8]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5d6]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5de]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5c4]"></a>lock_fs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5c5]"></a>unlock_fs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5c6]"></a>move_window</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5c7]"></a>sync</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5cb]"></a>remove_chain</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5cc]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5e7]"></a>clmt_clust</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5cd]"></a>dir_sdi</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[5cf]"></a>dir_next</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5d0]"></a>cmp_lfn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5d8]"></a>pick_lfn</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[5da]"></a>fit_lfn</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5d5]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5d4]"></a>dir_find</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5d7]"></a>dir_read</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5d9]"></a>dir_register</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5db]"></a>dir_remove</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[5dc]"></a>create_name</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5df]"></a>get_fileinfo</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5e0]"></a>follow_path</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5e1]"></a>check_fs</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = check_fs &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5e2]"></a>chk_mounted</STRONG> (Thumb, 564 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5e5]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5ec]"></a>check_dirent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_romfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</UL>

<P><STRONG><a name="[ad]"></a>i2c_bus_device_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>i2c_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>i2c_bus_device_control</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[5f1]"></a>SCL_H</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>

<P><STRONG><a name="[5f3]"></a>i2c_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_start
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
</UL>

<P><STRONG><a name="[5f4]"></a>i2c_restart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[5f5]"></a>i2c_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
</UL>

<P><STRONG><a name="[5f6]"></a>i2c_writeb</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
</UL>

<P><STRONG><a name="[5f7]"></a>i2c_readb</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[5f8]"></a>i2c_send_bytes</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[5f9]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = i2c_send_ack_or_nack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[5fa]"></a>i2c_recv_bytes</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[5fb]"></a>i2c_send_address</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[5fc]"></a>i2c_bit_send_address</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[129]"></a>i2c_bit_xfer</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.constdata)
</UL>
<P><STRONG><a name="[5f2]"></a>i2c_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[b0]"></a>_pin_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>_pin_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>_pin_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>rt_serial_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>rt_serial_open</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>rt_serial_close</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>rt_serial_read</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>rt_serial_write</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>rt_serial_control</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5fd]"></a>_serial_int_rx</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[5fe]"></a>_serial_dma_rx</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _serial_dma_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[b9]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>_spi_bus_device_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_spi_bus_device_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_spidev_device_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[606]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, completion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[607]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[608]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[60d]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_control
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
</UL>

<P><STRONG><a name="[609]"></a>_rt_pipe_resume_writer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _rt_pipe_resume_writer &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
</UL>

<P><STRONG><a name="[bf]"></a>rt_pipe_read</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_pipe_read &rArr; _rt_pipe_resume_writer &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_writer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(.text)
</UL>
<P><STRONG><a name="[60c]"></a>_rt_pipe_resume_reader</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _rt_pipe_resume_reader &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
</UL>

<P><STRONG><a name="[c0]"></a>rt_pipe_write</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_pipe_write &rArr; rt_ringbuffer_put_force &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>rt_pipe_control</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_pipe_control &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipe.o(.text)
</UL>
<P><STRONG><a name="[60b]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pipe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pipe_read
</UL>

<P><STRONG><a name="[60a]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pipe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_reader
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pipe_resume_writer
</UL>

<P><STRONG><a name="[c2]"></a>_portal_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _portal_init &rArr; rt_device_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_portal_open</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _portal_open &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>_portal_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _portal_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>_portal_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _portal_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_portal_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _portal_write &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_portal_rx_indicate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _portal_rx_indicate &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>_portal_tx_complete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, portal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _portal_tx_complete &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portal.o(.text)
</UL>
<P><STRONG><a name="[60e]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
</UL>

<P><STRONG><a name="[60f]"></a>rt_ringbuffer_status</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[c9]"></a>finsh_rx_ind</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = finsh_rx_ind &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[614]"></a>shell_auto_complete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = shell_auto_complete &rArr; list_prefix &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[618]"></a>shell_handle_history</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[619]"></a>shell_push_history</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_push_history
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[61d]"></a>_list_thread</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _list_thread &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
</UL>

<P><STRONG><a name="[61e]"></a>show_wait_queue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[61f]"></a>_list_sem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[622]"></a>_list_event</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[623]"></a>_list_mutex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _list_mutex &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[624]"></a>_list_mailbox</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[625]"></a>_list_msgqueue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[626]"></a>_list_mempool</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[627]"></a>_list_timer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _list_timer &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[628]"></a>_list_device</STRONG> (Thumb, 1074 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _list_device &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[629]"></a>str_is_prefix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[62a]"></a>str_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[620]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mod_detail
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[621]"></a>rt_list_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[62b]"></a>finsh_compile</STRONG> (Thumb, 2424 bytes, Stack size 40 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[62d]"></a>finsh_type_check</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>

<P><STRONG><a name="[631]"></a>finsh_block_insert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[630]"></a>finsh_block_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[635]"></a>finsh_block_split</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[632]"></a>finsh_block_merge</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[633]"></a>finsh_heap_gc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[646]"></a>make_sys_node</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[647]"></a>proc_param_list</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[64a]"></a>proc_expr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[64b]"></a>proc_identifier</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[64c]"></a>proc_primary_expr</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[64d]"></a>proc_postfix_expr</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[64e]"></a>proc_unary_expr</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[650]"></a>proc_type</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[64f]"></a>proc_cast_expr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[651]"></a>proc_multiplicative_expr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[652]"></a>proc_additive_expr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[653]"></a>proc_shift_expr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[654]"></a>proc_and_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[655]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[656]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[648]"></a>proc_assign_expr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[657]"></a>proc_variable_decl</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[659]"></a>proc_expr_statement</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_expr_statement &rArr; proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[661]"></a>token_prev_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_token.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[65e]"></a>token_next_char</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[660]"></a>token_spec_number</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[65f]"></a>token_proc_number</STRONG> (Thumb, 274 bytes, Stack size 160 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[662]"></a>token_proc_escape</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[663]"></a>token_proc_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[664]"></a>token_proc_char</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[665]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_match_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[667]"></a>token_trim_space</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_trim_space &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[668]"></a>token_run</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>

<P><STRONG><a name="[67b]"></a>netconn_recv_data</STRONG> (Thumb, 932 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[683]"></a>netconn_close_shutdown</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[da]"></a>recv_raw</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>recv_udp</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>recv_tcp</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>err_tcp</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[690]"></a>do_writemore</STRONG> (Thumb, 952 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[d6]"></a>sent_tcp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[693]"></a>do_close_internal</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[d7]"></a>poll_tcp</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[69c]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[dd]"></a>accept_function</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[6a0]"></a>pcb_new</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[6a6]"></a>netconn_drain</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[dc]"></a>do_connected</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = do_connected &rArr; setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>do_dns_found</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = do_dns_found &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[6c8]"></a>get_socket</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_socket &rArr; _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[6cd]"></a>tryget_socket</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[6c9]"></a>alloc_socket</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = alloc_socket &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[6ca]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[df]"></a>event_callback</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = event_callback &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[6cc]"></a>lwip_selscan</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_selscan &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[6ce]"></a>lwip_getaddrname</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[e0]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 552 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwip_getsockopt_internal &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwip_setsockopt_internal &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>tcpip_thread</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>pbuf_free_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>netif_device_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>tcpip_init_done_callback</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.text)
</UL>
<P><STRONG><a name="[6e9]"></a>dhcp_delete_msg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6ea]"></a>dhcp_option_trailer</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dhcp_option_trailer &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6eb]"></a>dhcp_option_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcp_option_byte &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[6ec]"></a>dhcp_option</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcp_option &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6ed]"></a>dhcp_option_short</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcp_option_short &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6ee]"></a>dhcp_create_msg</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6f1]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[6f0]"></a>dhcp_discover</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[6f4]"></a>dhcp_handle_nak</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[6f6]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[6f8]"></a>dhcp_option_long</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcp_option_long &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[6f9]"></a>dhcp_select</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[6fa]"></a>dhcp_handle_offer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[6fb]"></a>dhcp_t1_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[6fc]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[6fd]"></a>dhcp_t2_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[6ff]"></a>dhcp_reboot</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[701]"></a>dhcp_bind</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[702]"></a>dhcp_timeout</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[704]"></a>dhcp_handle_ack</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[708]"></a>dhcp_parse_reply</STRONG> (Thumb, 1074 bytes, Stack size 56 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[e7]"></a>dhcp_recv</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text)
</UL>
<P><STRONG><a name="[70b]"></a>dhcp_decline</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[70e]"></a>dns_parse_name</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[70d]"></a>dns_compare_name</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[e8]"></a>dns_recv</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL>
<P><STRONG><a name="[711]"></a>dns_send</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[712]"></a>dns_check_entry</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[713]"></a>dns_check_entries</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[715]"></a>dns_lookup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[716]"></a>dns_enqueue</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[720]"></a>pbuf_free_ooseq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[e9]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[722]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[737]"></a>tcp_close_shutdown</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[740]"></a>tcp_new_port</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[ea]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[745]"></a>tcp_kill_prio</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[746]"></a>tcp_kill_timewait</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[748]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[749]"></a>tcp_receive</STRONG> (Thumb, 2690 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[74d]"></a>tcp_parseopt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[74e]"></a>tcp_process</STRONG> (Thumb, 1206 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[750]"></a>tcp_listen_input</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[751]"></a>tcp_timewait_input</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[754]"></a>tcp_output_alloc_header</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[755]"></a>tcp_create_segment</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[756]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[757]"></a>tcp_write_checks</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[759]"></a>tcp_output_segment</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[eb]"></a>tcpip_tcp_timer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>arp_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>dhcp_timer_coarse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>dhcp_timer_fine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>dns_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[75d]"></a>udp_new_port</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[760]"></a>icmp_send_response</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[763]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[768]"></a>free_etharp_q</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[769]"></a>etharp_free_entry</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[76a]"></a>etharp_find_entry</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[76b]"></a>etharp_send_ip</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = etharp_send_ip &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[76c]"></a>etharp_update_arp_entry</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[76e]"></a>etharp_arp_input</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[76f]"></a>etharp_raw</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[770]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[f1]"></a>ethernetif_linkoutput</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>eth_netif_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = eth_netif_device_init &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>eth_tx_thread_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>eth_rx_thread_entry</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>fdevice_open</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fdevice_open &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_file.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>fdevice_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fdevice_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_file.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>fdevice_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fdevice_write &rArr; write &rArr; fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_file.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>fdevice_control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, log_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fdevice_control &rArr; fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_file.o(.text)
</UL>
<P><STRONG><a name="[774]"></a>_lg_lookup_session</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lg_lookup_session &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace_session_find
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_session
</UL>

<P><STRONG><a name="[778]"></a>_lg_parse_lvl</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lg_parse_lvl &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_session
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_write
</UL>

<P><STRONG><a name="[779]"></a>_lg_parse_session</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _lg_parse_session &rArr; _lg_lookup_session &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_lookup_session
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_trace
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_write
</UL>

<P><STRONG><a name="[fb]"></a>_log_write</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _log_write &rArr; _lg_parse_session &rArr; _lg_lookup_session &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idname_len
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_session
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lg_parse_lvl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>_log_control</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, log_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _log_control &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_trace.o(.text)
</UL>
<P><STRONG><a name="[77b]"></a>_idname_len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, log_trace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__logtrace_vfmtout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_write
</UL>

<P><STRONG><a name="[fd]"></a>_rym_rx_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _rym_rx_ind &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ymodem.o(.text)
</UL>
<P><STRONG><a name="[77d]"></a>_rym_read_code</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _rym_read_code &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[77e]"></a>_rym_read_data</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[77f]"></a>_rym_putchar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _rym_putchar &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[780]"></a>_rym_do_handshake</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _rym_do_handshake &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[782]"></a>_rym_trans_data</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
</UL>

<P><STRONG><a name="[783]"></a>_rym_do_trans</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[784]"></a>_rym_do_fin</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _rym_do_fin &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[785]"></a>_rym_do_recv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[7ac]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7a4]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[7ae]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7ad]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[795]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[100]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
